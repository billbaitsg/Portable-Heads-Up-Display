
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000002ba  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011f  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ff  00000000  00000000  00000439  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017d  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  000008b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017c  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000052  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	74 c0       	rjmp	.+232    	; 0xfc <__vector_9>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	43 c0       	rjmp	.+134    	; 0xa2 <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	78 c0       	rjmp	.+240    	; 0x112 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e2       	ldi	r30, 0x22	; 34
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a6 36       	cpi	r26, 0x66	; 102
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	02 d0       	rcall	.+4      	; 0x5a <main>
  56:	e3 c0       	rjmp	.+454    	; 0x21e <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
{	
	/* Local Variables */
	unsigned char cmd = 0;
	
	/* Initialize software modules */
	adc_init();	/* Initialize ADC */
  5a:	16 d0       	rcall	.+44     	; 0x88 <adc_init>
	//USI_SPI_initmaster();
	USI_SPI_initslave();	/* Initialize SPI as slave */
  5c:	95 d0       	rcall	.+298    	; 0x188 <USI_SPI_initslave>
	
	sei();	/* Enable global interrupts */
  5e:	78 94       	sei
	
	while(1)
	{
		cmd = USI_SPI_getc();
  60:	d6 d0       	rcall	.+428    	; 0x20e <USI_SPI_getc>
		if( !USI_SS )	/* if this SPI slave is selected */
  62:	cf 99       	sbic	0x19, 7	; 25
  64:	fd cf       	rjmp	.-6      	; 0x60 <main+0x6>
		{
			if( cmd == 'X' )	/* if the X axis is requested */
  66:	88 35       	cpi	r24, 0x58	; 88
  68:	19 f4       	brne	.+6      	; 0x70 <main+0x16>
			{
				USI_SPI_putc(X_AXIS);	/* Send X-axis value */
  6a:	80 91 60 00 	lds	r24, 0x0060
  6e:	09 c0       	rjmp	.+18     	; 0x82 <main+0x28>
				USI_SPI_wait();			/* wait for transmission to finish */
			}
			else if( cmd == 'Y' )	/* if the Y axis is requested */
  70:	89 35       	cpi	r24, 0x59	; 89
  72:	19 f4       	brne	.+6      	; 0x7a <main+0x20>
			{
				USI_SPI_putc(Y_AXIS);	/* Send Y-axis value */
  74:	80 91 61 00 	lds	r24, 0x0061
  78:	04 c0       	rjmp	.+8      	; 0x82 <main+0x28>
				USI_SPI_wait();			/* wait for transmission to finish */
			}
			else if( cmd == 'Z' )	/* if the Z axis is requested */
  7a:	8a 35       	cpi	r24, 0x5A	; 90
  7c:	89 f7       	brne	.-30     	; 0x60 <main+0x6>
			{
				USI_SPI_putc(Z_AXIS);	/* Send X-axis value */
  7e:	80 91 62 00 	lds	r24, 0x0062
  82:	9b d0       	rcall	.+310    	; 0x1ba <USI_SPI_putc>
				USI_SPI_wait();			/* wait for transmission to finish */
  84:	c7 d0       	rcall	.+398    	; 0x214 <USI_SPI_wait>
  86:	ec cf       	rjmp	.-40     	; 0x60 <main+0x6>

00000088 <adc_init>:
#include "proj_hdr.h"

/* Initialize ADC functionality */
void adc_init(void)
{
	ADMUX |= (0<<REFS1) | (0<<REFS0);	/* Vcc used as Vref, disconnect from PB0 */
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	87 b9       	out	0x07, r24	; 7
	ADCSRB |= (1<<ADLAR);				/* ADC Left Adjust Result */
  8c:	1c 9a       	sbi	0x03, 4	; 3
	ADMUX = (ADMUX & ~0x3F) | 0;							/* Single Ended Input ADC0 selected */
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 7c       	andi	r24, 0xC0	; 192
  92:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);				/* ADC Enabled */
  94:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADIE);				/* ADC Interrupt Enabled */
  96:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 3;						/* 8MHz Clk/64 = 125kHz, ADC Prescaler */
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	86 b9       	out	0x06, r24	; 6
	
	ADC_START;	/* Start ADC Conversion */
  9e:	36 9a       	sbi	0x06, 6	; 6
}
  a0:	08 95       	ret

000000a2 <__vector_13>:

/* ADC finished conversion interrupt */
ISR(ADC_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	if( (ADMUX & 0x3F) == 0 )	/* if ADC0 is selected */
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	8f 73       	andi	r24, 0x3F	; 63
  b6:	90 70       	andi	r25, 0x00	; 0
  b8:	89 2b       	or	r24, r25
  ba:	39 f4       	brne	.+14     	; 0xca <__vector_13+0x28>
	{
		X_AXIS = ADCH;	/* Read the X-axis accelerometer measurment */
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	80 93 60 00 	sts	0x0060, r24
		ADMUX = (ADMUX & ~0x3F) | 1;	/* switch to ADC1 */
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	80 7c       	andi	r24, 0xC0	; 192
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	10 c0       	rjmp	.+32     	; 0xea <__vector_13+0x48>
	}
	else if ( (ADMUX & 0x3F) == 1 )	/* if ADC1 is selected */
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	8f 73       	andi	r24, 0x3F	; 63
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	39 f4       	brne	.+14     	; 0xe0 <__vector_13+0x3e>
	{
		Y_AXIS = ADCH;	/* Read the Y-axis accelerometer measurment */
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 93 61 00 	sts	0x0061, r24
		ADMUX = (ADMUX & ~0x3F) | 2;	/* switch back to ADC2 */
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	80 7c       	andi	r24, 0xC0	; 192
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	05 c0       	rjmp	.+10     	; 0xea <__vector_13+0x48>
	}
	else 	/* any other ADC selected */
	{
		Z_AXIS = ADCH;	/* Read the Z-axis accelerometer measurement */
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 93 62 00 	sts	0x0062, r24
		ADMUX = (ADMUX & ~0x3F) | 0;	/* switch back to ADC0 */
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	80 7c       	andi	r24, 0xC0	; 192
  ea:	87 b9       	out	0x07, r24	; 7
	}
	ADC_START;	/* Start next ADC conversion */
  ec:	36 9a       	sbi	0x06, 6	; 6
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_9>:
 *  results in one clock period on the clock pin and for the USI counter.
 */
/*#pragma vector=TIMER0_COMP_vect */	/* Compiler specific directive */
/*__interrupt void timer0comp_handler()*/
ISR(TIM0_COMPA_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
	USICR |= (1<<USITC);	// Toggle clock output pin.
 106:	68 9a       	sbi	0x0d, 0	; 13
}
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_16>:
 *  For all modes the USIDR contents are stored and flags are updated.
 */
/*#pragma vector=USI_OVF_vect*/	/* Compiler specific directive */
/*__interrupt void usiovf_handler()*/
ISR(USI_OVF_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	if( USI_SPI_status.masterMode == 1 ) {
 11e:	80 91 64 00 	lds	r24, 0x0064
 122:	80 ff       	sbrs	r24, 0
 124:	03 c0       	rjmp	.+6      	; 0x12c <__vector_16+0x1a>
		TIMSK0 &= ~(1<<OCIE0A);
 126:	89 b7       	in	r24, 0x39	; 57
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	89 bf       	out	0x39, r24	; 57
	}
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8e b9       	out	0x0e, r24	; 14
	USI_SPI_status.transferComplete = 1;
 130:	80 91 64 00 	lds	r24, 0x0064
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 93 64 00 	sts	0x0064, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
 13a:	8f b1       	in	r24, 0x0f	; 15
 13c:	80 93 65 00 	sts	0x0065, r24
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <USI_SPI_initmaster>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initmaster(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
 14c:	8a b3       	in	r24, 0x1a	; 26
 14e:	80 63       	ori	r24, 0x30	; 48
 150:	8a bb       	out	0x1a, r24	; 26
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
 152:	d6 98       	cbi	0x1a, 6	; 26
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
 154:	de 9a       	sbi	0x1b, 6	; 27
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 156:	8a e5       	ldi	r24, 0x5A	; 90
 158:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0) |
	        (1<<USICLK);

	// Enable 'Clear Timer on Compare match' and init prescaler.
	TCCR0A = (1<<WGM01);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 bf       	out	0x30, r24	; 48
	TCCR0B = TC0_PS_SETTING;
 15e:	83 bf       	out	0x33, r24	; 51
	
	// Init Output Compare Register.
	OCR0A = TC0_COMPARE_VALUE;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	86 bf       	out	0x36, r24	; 54
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 1;
 164:	80 91 64 00 	lds	r24, 0x0064
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.transferComplete = 0;
 16e:	80 91 64 00 	lds	r24, 0x0064
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.writeCollision   = 0;
 178:	80 91 64 00 	lds	r24, 0x0064
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	80 93 64 00 	sts	0x0064, r24
	
	storedUSIDR = 0;
 182:	10 92 65 00 	sts	0x0065, r1
}
 186:	08 95       	ret

00000188 <USI_SPI_initslave>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initslave(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
 188:	d5 9a       	sbi	0x1a, 5	; 26
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN) | (1<<USI_SELECT_PIN); // Inputs.
 18a:	d6 98       	cbi	0x1a, 6	; 26
	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN) | (1<<USI_SELECT_PIN);  // Pull-ups.
 18c:	8b b3       	in	r24, 0x1b	; 27
 18e:	80 6d       	ori	r24, 0xD0	; 208
 190:	8b bb       	out	0x1b, r24	; 27
	
	// Configure USI to 3-wire slave mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 192:	88 e5       	ldi	r24, 0x58	; 88
 194:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0);
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 0;
 196:	80 91 64 00 	lds	r24, 0x0064
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.transferComplete = 0;
 1a0:	80 91 64 00 	lds	r24, 0x0064
 1a4:	8d 7f       	andi	r24, 0xFD	; 253
 1a6:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.writeCollision   = 0;
 1aa:	80 91 64 00 	lds	r24, 0x0064
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	80 93 64 00 	sts	0x0064, r24
	
	storedUSIDR = 0;
 1b4:	10 92 65 00 	sts	0x0065, r1
}
 1b8:	08 95       	ret

000001ba <USI_SPI_putc>:
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
char USI_SPI_putc( unsigned char val )
{
 1ba:	28 2f       	mov	r18, r24
	// Check if transmission in progress,
	// i.e. USI counter unequal to zero.
	if( (USISR & 0x0F) != 0 ) {
 1bc:	8e b1       	in	r24, 0x0e	; 14
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	89 2b       	or	r24, r25
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <USI_SPI_putc+0x1c>
		// Indicate write collision and return.
		USI_SPI_status.writeCollision = 1;
 1c8:	80 91 64 00 	lds	r24, 0x0064
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	80 93 64 00 	sts	0x0064, r24
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret
		return 0;
	}
	
	// Reinit flags.
	USI_SPI_status.transferComplete = 0;
 1d6:	80 91 64 00 	lds	r24, 0x0064
 1da:	8d 7f       	andi	r24, 0xFD	; 253
 1dc:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.writeCollision = 0;
 1e0:	80 91 64 00 	lds	r24, 0x0064
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	80 93 64 00 	sts	0x0064, r24

	// Put data in USI data register.
	USIDR = val;
 1ea:	2f b9       	out	0x0f, r18	; 15
	
	// Master should now enable compare match interrupts.
	if( USI_SPI_status.masterMode == 1 ) {
 1ec:	80 91 64 00 	lds	r24, 0x0064
 1f0:	80 ff       	sbrs	r24, 0
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <USI_SPI_putc+0x46>
		TIFR0 |= (1<<OCF0A);   // Clear compare match flag.
 1f4:	88 b7       	in	r24, 0x38	; 56
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	88 bf       	out	0x38, r24	; 56
		TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
 1fa:	89 b7       	in	r24, 0x39	; 57
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	89 bf       	out	0x39, r24	; 57
	}

	if( USI_SPI_status.writeCollision == 0 ) return 1;
 200:	80 91 64 00 	lds	r24, 0x0064
 204:	86 95       	lsr	r24
 206:	86 95       	lsr	r24
 208:	80 95       	com	r24
 20a:	81 70       	andi	r24, 0x01	; 1
	return 0;
}
 20c:	08 95       	ret

0000020e <USI_SPI_getc>:
 *  like you would read from the SPDR register in the native SPI module.
 */
unsigned char USI_SPI_getc(void)
{
	return storedUSIDR;
}
 20e:	80 91 65 00 	lds	r24, 0x0065
 212:	08 95       	ret

00000214 <USI_SPI_wait>:
 *  This function waits until the transfer complete flag is set.
 *  Use this function like you would wait for the native SPI interrupt flag.
 */
void USI_SPI_wait(void)
{
	do {} while( USI_SPI_status.transferComplete == 0 );
 214:	80 91 64 00 	lds	r24, 0x0064
 218:	81 ff       	sbrs	r24, 1
 21a:	fc cf       	rjmp	.-8      	; 0x214 <USI_SPI_wait>
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
