
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000002c2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012f  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000313  00000000  00000000  00000451  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017d  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000188  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000052  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	6e c0       	rjmp	.+220    	; 0xf0 <__vector_9>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	3d c0       	rjmp	.+122    	; 0x96 <__vector_13>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	73 c0       	rjmp	.+230    	; 0x106 <__vector_15>
  20:	7c c0       	rjmp	.+248    	; 0x11a <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea e2       	ldi	r30, 0x2A	; 42
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a4 e6       	ldi	r26, 0x64	; 100
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 36       	cpi	r26, 0x66	; 102
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	e9 c0       	rjmp	.+466    	; 0x226 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
	unsigned char cmd = 0;
	
	/* Initialize software modules */
	//adc_init();	/* Initialize ADC */
	//USI_SPI_initmaster();
	USI_SPI_initslave();	/* Initialize SPI as slave */
  56:	9c d0       	rcall	.+312    	; 0x190 <USI_SPI_initslave>
	
	sei();	/* Enable global interrupts */
  58:	78 94       	sei
	
	while(1)
	{
		cmd = USI_SPI_getc();
  5a:	dd d0       	rcall	.+442    	; 0x216 <USI_SPI_getc>
		if( cmd == 'X' )	/* if the X axis is requested */
  5c:	88 35       	cpi	r24, 0x58	; 88
  5e:	19 f4       	brne	.+6      	; 0x66 <main+0x10>
		{
			USI_SPI_putc(X_AXIS);	/* Send X-axis value */
  60:	80 91 60 00 	lds	r24, 0x0060
  64:	09 c0       	rjmp	.+18     	; 0x78 <main+0x22>
			USI_SPI_wait();			/* wait for transmission to finish */
		}
		else if( cmd == 'Y' )	/* if the Y axis is requested */
  66:	89 35       	cpi	r24, 0x59	; 89
  68:	19 f4       	brne	.+6      	; 0x70 <main+0x1a>
		{
			USI_SPI_putc(Y_AXIS);	/* Send Y-axis value */
  6a:	80 91 61 00 	lds	r24, 0x0061
  6e:	04 c0       	rjmp	.+8      	; 0x78 <main+0x22>
			USI_SPI_wait();			/* wait for transmission to finish */
		}
		else if( cmd == 'Z' )	/* if the Z axis is requested */
  70:	8a 35       	cpi	r24, 0x5A	; 90
  72:	99 f7       	brne	.-26     	; 0x5a <main+0x4>
		{
			USI_SPI_putc(Z_AXIS);	/* Send X-axis value */
  74:	80 91 62 00 	lds	r24, 0x0062
  78:	a4 d0       	rcall	.+328    	; 0x1c2 <USI_SPI_putc>
			USI_SPI_wait();			/* wait for transmission to finish */
  7a:	d0 d0       	rcall	.+416    	; 0x21c <USI_SPI_wait>
  7c:	ee cf       	rjmp	.-36     	; 0x5a <main+0x4>

0000007e <adc_init>:
#include "proj_hdr.h"

/* Initialize ADC functionality */
void adc_init(void)
{
	ADMUX |= (0<<REFS1) | (0<<REFS0);	/* Vcc used as Vref, disconnect from PB0 */
  7e:	87 b1       	in	r24, 0x07	; 7
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRB |= (1<<ADLAR);				/* ADC Left Adjust Result */
  82:	1c 9a       	sbi	0x03, 4	; 3
	ADMUX |= 0;							/* Single Ended Input ADC0 selected */
  84:	87 b1       	in	r24, 0x07	; 7
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);				/* ADC Enabled */
  88:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADIE);				/* ADC Interrupt Enabled */
  8a:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 3;						/* 8MHz Clk/64 = 125kHz, ADC Prescaler */
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	86 b9       	out	0x06, r24	; 6
	
	ADC_START;	/* Start ADC Conversion */
  92:	36 9a       	sbi	0x06, 6	; 6
}
  94:	08 95       	ret

00000096 <__vector_13>:

/* ADC finished conversion interrupt */
ISR(ADC_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if( (ADMUX & 0x0F) == 0 )	/* if ADC0 is selected */
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	90 70       	andi	r25, 0x00	; 0
  ac:	89 2b       	or	r24, r25
  ae:	39 f4       	brne	.+14     	; 0xbe <__vector_13+0x28>
	{
		X_AXIS = ADCH;	/* Read the X-axis accelerometer measurment */
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	80 93 60 00 	sts	0x0060, r24
		ADMUX = (ADMUX & ~0x0F) | 1;	/* switch to ADC1 */
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	10 c0       	rjmp	.+32     	; 0xde <__vector_13+0x48>
	}
	else if ( (ADMUX & 0x0F) == 1 )	/* if ADC1 is selected */
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	39 f4       	brne	.+14     	; 0xd4 <__vector_13+0x3e>
	{
		Y_AXIS = ADCH;	/* Read the Y-axis accelerometer measurment */
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	80 93 61 00 	sts	0x0061, r24
		ADMUX = (ADMUX & ~0x0F) | 2;	/* switch back to ADC2 */
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	05 c0       	rjmp	.+10     	; 0xde <__vector_13+0x48>
	}
	else 	/* any other ADC selected */
	{
		Z_AXIS = ADCH;	/* Read the Z-axis accelerometer measurement */
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	80 93 62 00 	sts	0x0062, r24
		ADMUX = (ADMUX & ~0x0F) | 0;	/* switch back to ADC0 */
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	87 b9       	out	0x07, r24	; 7
	}
	ADC_START;	/* Start next ADC conversion */
  e0:	36 9a       	sbi	0x06, 6	; 6
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_9>:
 *  results in one clock period on the clock pin and for the USI counter.
 */
/*#pragma vector=TIMER0_COMP_vect */	/* Compiler specific directive */
/*__interrupt void timer0comp_handler()*/
ISR(TIM0_COMPA_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
	USICR |= (1<<USITC);	// Toggle clock output pin.
  fa:	68 9a       	sbi	0x0d, 0	; 13
}
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_15>:

/* USI SPI start condition interrupt */
ISR(USI_START_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
	/* not enabled */
}
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_16>:
 *  For all modes the USIDR contents are stored and flags are updated.
 */
/*#pragma vector=USI_OVF_vect*/	/* Compiler specific directive */
/*__interrupt void usiovf_handler()*/
ISR(USI_OVF_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	if( USI_SPI_status.masterMode == 1 ) {
 126:	80 91 64 00 	lds	r24, 0x0064
 12a:	80 ff       	sbrs	r24, 0
 12c:	03 c0       	rjmp	.+6      	; 0x134 <__vector_16+0x1a>
		TIMSK0 &= ~(1<<OCIE0A);
 12e:	89 b7       	in	r24, 0x39	; 57
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	89 bf       	out	0x39, r24	; 57
	}
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	8e b9       	out	0x0e, r24	; 14
	USI_SPI_status.transferComplete = 1;
 138:	80 91 64 00 	lds	r24, 0x0064
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 93 64 00 	sts	0x0064, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
 142:	8f b1       	in	r24, 0x0f	; 15
 144:	80 93 65 00 	sts	0x0065, r24
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <USI_SPI_initmaster>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initmaster(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
 154:	8a b3       	in	r24, 0x1a	; 26
 156:	80 63       	ori	r24, 0x30	; 48
 158:	8a bb       	out	0x1a, r24	; 26
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
 15a:	d6 98       	cbi	0x1a, 6	; 26
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
 15c:	de 9a       	sbi	0x1b, 6	; 27
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 15e:	8a e5       	ldi	r24, 0x5A	; 90
 160:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0) |
	        (1<<USICLK);

	// Enable 'Clear Timer on Compare match' and init prescaler.
	TCCR0A = (1<<WGM01);
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 bf       	out	0x30, r24	; 48
	TCCR0B = TC0_PS_SETTING;
 166:	83 bf       	out	0x33, r24	; 51
	
	// Init Output Compare Register.
	OCR0A = TC0_COMPARE_VALUE;
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	86 bf       	out	0x36, r24	; 54
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 1;
 16c:	80 91 64 00 	lds	r24, 0x0064
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.transferComplete = 0;
 176:	80 91 64 00 	lds	r24, 0x0064
 17a:	8d 7f       	andi	r24, 0xFD	; 253
 17c:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.writeCollision   = 0;
 180:	80 91 64 00 	lds	r24, 0x0064
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	80 93 64 00 	sts	0x0064, r24
	
	storedUSIDR = 0;
 18a:	10 92 65 00 	sts	0x0065, r1
}
 18e:	08 95       	ret

00000190 <USI_SPI_initslave>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initslave(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
 190:	d5 9a       	sbi	0x1a, 5	; 26
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN); // Inputs.
 192:	d6 98       	cbi	0x1a, 6	; 26
	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN);  // Pull-ups.
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	80 65       	ori	r24, 0x50	; 80
 198:	8b bb       	out	0x1b, r24	; 27
	
	// Configure USI to 3-wire slave mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 19a:	88 e5       	ldi	r24, 0x58	; 88
 19c:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0);
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 0;
 19e:	80 91 64 00 	lds	r24, 0x0064
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.transferComplete = 0;
 1a8:	80 91 64 00 	lds	r24, 0x0064
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.writeCollision   = 0;
 1b2:	80 91 64 00 	lds	r24, 0x0064
 1b6:	8b 7f       	andi	r24, 0xFB	; 251
 1b8:	80 93 64 00 	sts	0x0064, r24
	
	storedUSIDR = 0;
 1bc:	10 92 65 00 	sts	0x0065, r1
}
 1c0:	08 95       	ret

000001c2 <USI_SPI_putc>:
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
char USI_SPI_putc( unsigned char val )
{
 1c2:	28 2f       	mov	r18, r24
	// Check if transmission in progress,
	// i.e. USI counter unequal to zero.
	if( (USISR & 0x0F) != 0 ) {
 1c4:	8e b1       	in	r24, 0x0e	; 14
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	90 70       	andi	r25, 0x00	; 0
 1cc:	89 2b       	or	r24, r25
 1ce:	39 f0       	breq	.+14     	; 0x1de <USI_SPI_putc+0x1c>
		// Indicate write collision and return.
		USI_SPI_status.writeCollision = 1;
 1d0:	80 91 64 00 	lds	r24, 0x0064
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 93 64 00 	sts	0x0064, r24
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
		return 0;
	}
	
	// Reinit flags.
	USI_SPI_status.transferComplete = 0;
 1de:	80 91 64 00 	lds	r24, 0x0064
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	80 93 64 00 	sts	0x0064, r24
	USI_SPI_status.writeCollision = 0;
 1e8:	80 91 64 00 	lds	r24, 0x0064
 1ec:	8b 7f       	andi	r24, 0xFB	; 251
 1ee:	80 93 64 00 	sts	0x0064, r24

	// Put data in USI data register.
	USIDR = val;
 1f2:	2f b9       	out	0x0f, r18	; 15
	
	// Master should now enable compare match interrupts.
	if( USI_SPI_status.masterMode == 1 ) {
 1f4:	80 91 64 00 	lds	r24, 0x0064
 1f8:	80 ff       	sbrs	r24, 0
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <USI_SPI_putc+0x46>
		TIFR0 |= (1<<OCF0A);   // Clear compare match flag.
 1fc:	88 b7       	in	r24, 0x38	; 56
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	88 bf       	out	0x38, r24	; 56
		TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
 202:	89 b7       	in	r24, 0x39	; 57
 204:	82 60       	ori	r24, 0x02	; 2
 206:	89 bf       	out	0x39, r24	; 57
	}

	if( USI_SPI_status.writeCollision == 0 ) return 1;
 208:	80 91 64 00 	lds	r24, 0x0064
 20c:	86 95       	lsr	r24
 20e:	86 95       	lsr	r24
 210:	80 95       	com	r24
 212:	81 70       	andi	r24, 0x01	; 1
	return 0;
}
 214:	08 95       	ret

00000216 <USI_SPI_getc>:
 *  like you would read from the SPDR register in the native SPI module.
 */
unsigned char USI_SPI_getc(void)
{
	return storedUSIDR;
}
 216:	80 91 65 00 	lds	r24, 0x0065
 21a:	08 95       	ret

0000021c <USI_SPI_wait>:
 *  This function waits until the transfer complete flag is set.
 *  Use this function like you would wait for the native SPI interrupt flag.
 */
void USI_SPI_wait(void)
{
	do {} while( USI_SPI_status.transferComplete == 0 );
 21c:	80 91 64 00 	lds	r24, 0x0064
 220:	81 ff       	sbrs	r24, 1
 222:	fc cf       	rjmp	.-8      	; 0x21c <USI_SPI_wait>
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
