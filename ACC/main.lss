
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000282  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000012f  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000313  00000000  00000000  00000411  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017d  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000374  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000188  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000047  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	60 c0       	rjmp	.+192    	; 0xd4 <__vector_9>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	2f c0       	rjmp	.+94     	; 0x7a <__vector_13>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	65 c0       	rjmp	.+202    	; 0xea <__vector_15>
  20:	6e c0       	rjmp	.+220    	; 0xfe <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	e6 c0       	rjmp	.+460    	; 0x20a <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
{
	/* Local Variables */
	unsigned char cmd = 0;
	
	/* Initialize software modules */
	adc_init();	/* Initialize ADC */
  40:	11 d0       	rcall	.+34     	; 0x64 <adc_init>
	//USI_SPI_initmaster();
	USI_SPI_initslave();	/* Initialize SPI as slave */
  42:	98 d0       	rcall	.+304    	; 0x174 <USI_SPI_initslave>
	
	sei();	/* Enable global interrupts */
  44:	78 94       	sei
	
	while(1)
	{
		cmd = USI_SPI_getc();
  46:	d9 d0       	rcall	.+434    	; 0x1fa <USI_SPI_getc>
		if( cmd == 'X' )	/* if the X axis is requested */
  48:	88 35       	cpi	r24, 0x58	; 88
  4a:	11 f0       	breq	.+4      	; 0x50 <main+0x10>
		{
			USI_SPI_putc(X_AXIS);	/* Send X-axis value */
			USI_SPI_wait();			/* wait for transmission to finish */
		}
		else if( cmd == 'Y' )	/* if the Y axis is requested */
  4c:	89 35       	cpi	r24, 0x59	; 89
  4e:	19 f4       	brne	.+6      	; 0x56 <main+0x16>
		{
			USI_SPI_putc(X_AXIS);	/* Send Y-axis value */
  50:	80 91 60 00 	lds	r24, 0x0060
  54:	04 c0       	rjmp	.+8      	; 0x5e <main+0x1e>
			USI_SPI_wait();			/* wait for transmission to finish */
		}
		else if( cmd == 'Z' )	/* if the Z axis is requested */
  56:	8a 35       	cpi	r24, 0x5A	; 90
  58:	b1 f7       	brne	.-20     	; 0x46 <main+0x6>
		{
			USI_SPI_putc(Z_AXIS);	/* Send X-axis value */
  5a:	80 91 62 00 	lds	r24, 0x0062
  5e:	a3 d0       	rcall	.+326    	; 0x1a6 <USI_SPI_putc>
			USI_SPI_wait();			/* wait for transmission to finish */
  60:	cf d0       	rcall	.+414    	; 0x200 <USI_SPI_wait>
  62:	f1 cf       	rjmp	.-30     	; 0x46 <main+0x6>

00000064 <adc_init>:
#include "proj_hdr.h"

/* Initialize ADC functionality */
void adc_init(void)
{
	ADMUX |= (0<<REFS1) | (0<<REFS0);	/* Vcc used as Vref, disconnect from PB0 */
  64:	87 b1       	in	r24, 0x07	; 7
  66:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);				/* ADC Left Adjust Result */
  68:	3c 9a       	sbi	0x07, 4	; 7
	ADMUX |= 2;							/* Single Ended Input ADC2 selected */
  6a:	39 9a       	sbi	0x07, 1	; 7
	ADCSRA |= (1<<ADEN);				/* ADC Enabled */
  6c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADIE);				/* ADC Interrupt Enabled */
  6e:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 3;						/* 8MHz Clk/64 = 125kHz, ADC Prescaler */
  70:	86 b1       	in	r24, 0x06	; 6
  72:	83 60       	ori	r24, 0x03	; 3
  74:	86 b9       	out	0x06, r24	; 6
	
	ADC_START;	/* Start ADC Conversion */
  76:	36 9a       	sbi	0x06, 6	; 6
}
  78:	08 95       	ret

0000007a <__vector_13>:

/* ADC finished conversion interrupt */
ISR(ADC_vect)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
	if( (ADMUX & 0x0F) == 0 )	/* if ADC0 is selected */
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	90 70       	andi	r25, 0x00	; 0
  90:	89 2b       	or	r24, r25
  92:	39 f4       	brne	.+14     	; 0xa2 <__vector_13+0x28>
	{
		X_AXIS = ADCH;	/* Read the X-axis accelerometer measurment */
  94:	85 b1       	in	r24, 0x05	; 5
  96:	80 93 60 00 	sts	0x0060, r24
		ADMUX = (ADMUX & ~0x0F) | 1;	/* switch to ADC1 */
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	10 c0       	rjmp	.+32     	; 0xc2 <__vector_13+0x48>
	}
	else if ( (ADMUX & 0x0F) == 1 )	/* if ADC1 is selected */
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <__vector_13+0x3e>
	{
		Y_AXIS = ADCH;	/* Read the Y-axis accelerometer measurment */
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	80 93 61 00 	sts	0x0061, r24
		ADMUX = (ADMUX & ~0x0F) | 2;	/* switch back to ADC2 */
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__vector_13+0x48>
	}
	else 	/* any other ADC selected */
	{
		Z_AXIS = ADCH;	/* Read the Z-axis accelerometer measurement */
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	80 93 62 00 	sts	0x0062, r24
		ADMUX = (ADMUX & ~0x0F) | 0;	/* switch back to ADC0 */
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	87 b9       	out	0x07, r24	; 7
	}
	ADC_START;	/* Start next ADC conversion */
  c4:	36 9a       	sbi	0x06, 6	; 6
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_9>:
 *  results in one clock period on the clock pin and for the USI counter.
 */
/*#pragma vector=TIMER0_COMP_vect */	/* Compiler specific directive */
/*__interrupt void timer0comp_handler()*/
ISR(TIM0_COMPA_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
	USICR |= (1<<USITC);	// Toggle clock output pin.
  de:	68 9a       	sbi	0x0d, 0	; 13
}
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_15>:

/* USI SPI start condition interrupt */
ISR(USI_START_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
	/* not enabled */
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_16>:
 *  For all modes the USIDR contents are stored and flags are updated.
 */
/*#pragma vector=USI_OVF_vect*/	/* Compiler specific directive */
/*__interrupt void usiovf_handler()*/
ISR(USI_OVF_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	if( USI_SPI_status.masterMode == 1 ) {
 10a:	80 91 63 00 	lds	r24, 0x0063
 10e:	80 ff       	sbrs	r24, 0
 110:	03 c0       	rjmp	.+6      	; 0x118 <__vector_16+0x1a>
		TIMSK0 &= ~(1<<OCIE0A);
 112:	89 b7       	in	r24, 0x39	; 57
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	89 bf       	out	0x39, r24	; 57
	}
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	8e b9       	out	0x0e, r24	; 14
	USI_SPI_status.transferComplete = 1;
 11c:	80 91 63 00 	lds	r24, 0x0063
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 93 63 00 	sts	0x0063, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
 126:	8f b1       	in	r24, 0x0f	; 15
 128:	80 93 64 00 	sts	0x0064, r24
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <USI_SPI_initmaster>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initmaster(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
 138:	8a b3       	in	r24, 0x1a	; 26
 13a:	80 63       	ori	r24, 0x30	; 48
 13c:	8a bb       	out	0x1a, r24	; 26
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
 13e:	d6 98       	cbi	0x1a, 6	; 26
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
 140:	de 9a       	sbi	0x1b, 6	; 27
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 142:	8a e5       	ldi	r24, 0x5A	; 90
 144:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0) |
	        (1<<USICLK);

	// Enable 'Clear Timer on Compare match' and init prescaler.
	TCCR0A = (1<<WGM01);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 bf       	out	0x30, r24	; 48
	TCCR0B = TC0_PS_SETTING;
 14a:	83 bf       	out	0x33, r24	; 51
	
	// Init Output Compare Register.
	OCR0A = TC0_COMPARE_VALUE;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	86 bf       	out	0x36, r24	; 54
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 1;
 150:	80 91 63 00 	lds	r24, 0x0063
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 93 63 00 	sts	0x0063, r24
	USI_SPI_status.transferComplete = 0;
 15a:	80 91 63 00 	lds	r24, 0x0063
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	80 93 63 00 	sts	0x0063, r24
	USI_SPI_status.writeCollision   = 0;
 164:	80 91 63 00 	lds	r24, 0x0063
 168:	8b 7f       	andi	r24, 0xFB	; 251
 16a:	80 93 63 00 	sts	0x0063, r24
	
	storedUSIDR = 0;
 16e:	10 92 64 00 	sts	0x0064, r1
}
 172:	08 95       	ret

00000174 <USI_SPI_initslave>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initslave(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
 174:	d5 9a       	sbi	0x1a, 5	; 26
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN); // Inputs.
 176:	d6 98       	cbi	0x1a, 6	; 26
	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN);  // Pull-ups.
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	80 65       	ori	r24, 0x50	; 80
 17c:	8b bb       	out	0x1b, r24	; 27
	
	// Configure USI to 3-wire slave mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 17e:	88 e5       	ldi	r24, 0x58	; 88
 180:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0);
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 0;
 182:	80 91 63 00 	lds	r24, 0x0063
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	80 93 63 00 	sts	0x0063, r24
	USI_SPI_status.transferComplete = 0;
 18c:	80 91 63 00 	lds	r24, 0x0063
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	80 93 63 00 	sts	0x0063, r24
	USI_SPI_status.writeCollision   = 0;
 196:	80 91 63 00 	lds	r24, 0x0063
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	80 93 63 00 	sts	0x0063, r24
	
	storedUSIDR = 0;
 1a0:	10 92 64 00 	sts	0x0064, r1
}
 1a4:	08 95       	ret

000001a6 <USI_SPI_putc>:
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
char USI_SPI_putc( unsigned char val )
{
 1a6:	28 2f       	mov	r18, r24
	// Check if transmission in progress,
	// i.e. USI counter unequal to zero.
	if( (USISR & 0x0F) != 0 ) {
 1a8:	8e b1       	in	r24, 0x0e	; 14
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	90 70       	andi	r25, 0x00	; 0
 1b0:	89 2b       	or	r24, r25
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <USI_SPI_putc+0x1c>
		// Indicate write collision and return.
		USI_SPI_status.writeCollision = 1;
 1b4:	80 91 63 00 	lds	r24, 0x0063
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	80 93 63 00 	sts	0x0063, r24
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
		return 0;
	}
	
	// Reinit flags.
	USI_SPI_status.transferComplete = 0;
 1c2:	80 91 63 00 	lds	r24, 0x0063
 1c6:	8d 7f       	andi	r24, 0xFD	; 253
 1c8:	80 93 63 00 	sts	0x0063, r24
	USI_SPI_status.writeCollision = 0;
 1cc:	80 91 63 00 	lds	r24, 0x0063
 1d0:	8b 7f       	andi	r24, 0xFB	; 251
 1d2:	80 93 63 00 	sts	0x0063, r24

	// Put data in USI data register.
	USIDR = val;
 1d6:	2f b9       	out	0x0f, r18	; 15
	
	// Master should now enable compare match interrupts.
	if( USI_SPI_status.masterMode == 1 ) {
 1d8:	80 91 63 00 	lds	r24, 0x0063
 1dc:	80 ff       	sbrs	r24, 0
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <USI_SPI_putc+0x46>
		TIFR0 |= (1<<OCF0A);   // Clear compare match flag.
 1e0:	88 b7       	in	r24, 0x38	; 56
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 bf       	out	0x38, r24	; 56
		TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
 1e6:	89 b7       	in	r24, 0x39	; 57
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	89 bf       	out	0x39, r24	; 57
	}

	if( USI_SPI_status.writeCollision == 0 ) return 1;
 1ec:	80 91 63 00 	lds	r24, 0x0063
 1f0:	86 95       	lsr	r24
 1f2:	86 95       	lsr	r24
 1f4:	80 95       	com	r24
 1f6:	81 70       	andi	r24, 0x01	; 1
	return 0;
}
 1f8:	08 95       	ret

000001fa <USI_SPI_getc>:
 *  like you would read from the SPDR register in the native SPI module.
 */
unsigned char USI_SPI_getc(void)
{
	return storedUSIDR;
}
 1fa:	80 91 64 00 	lds	r24, 0x0064
 1fe:	08 95       	ret

00000200 <USI_SPI_wait>:
 *  This function waits until the transfer complete flag is set.
 *  Use this function like you would wait for the native SPI interrupt flag.
 */
void USI_SPI_wait(void)
{
	do {} while( USI_SPI_status.transferComplete == 0 );
 200:	80 91 63 00 	lds	r24, 0x0063
 204:	81 ff       	sbrs	r24, 1
 206:	fc cf       	rjmp	.-8      	; 0x200 <USI_SPI_wait>
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
