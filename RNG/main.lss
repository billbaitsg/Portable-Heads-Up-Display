
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000252  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000118  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d3  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017d  00000000  00000000  0000069d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000034c  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000179  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001e  00000000  00000000  00000dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	3a c0       	rjmp	.+116    	; 0x86 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	50 c0       	rjmp	.+160    	; 0xbc <__vector_13>
  1c:	59 c0       	rjmp	.+178    	; 0xd0 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 36       	cpi	r26, 0x63	; 99
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	ce c0       	rjmp	.+412    	; 0x1da <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:

/* Global Variables for ADC readings */
volatile char RANGE = 0;	/* Range to object */

int main(void)
{
  40:	1f 93       	push	r17
	/* Local Variables */
	unsigned char cmd = 0;
	
	/* Initialize software modules */
	adc_init();	/* Initialize ADC */
  42:	16 d0       	rcall	.+44     	; 0x70 <adc_init>
	USI_SPI_initslave();	/* Initialize SPI as slave */
  44:	80 d0       	rcall	.+256    	; 0x146 <USI_SPI_initslave>
	
	sei();	/* Enable global interrupts */
  46:	78 94       	sei
	
	while(1)
	{
		cmd = USI_SPI_getc();
  48:	c0 d0       	rcall	.+384    	; 0x1ca <USI_SPI_getc>
  4a:	18 2f       	mov	r17, r24
		USI_SPI_wait();
  4c:	c1 d0       	rcall	.+386    	; 0x1d0 <USI_SPI_wait>
		if( cmd == 'R' )	/* if the X axis is requested */
  4e:	12 35       	cpi	r17, 0x52	; 82
  50:	d9 f7       	brne	.-10     	; 0x48 <main+0x8>
		{
			USI_SPI_putc(RANGE);	// Send temp value to SPI and increment
  52:	80 91 60 00 	lds	r24, 0x0060
  56:	90 d0       	rcall	.+288    	; 0x178 <USI_SPI_putc>
			USI_SPI_wait();		// wait for transmission to finish
  58:	bb d0       	rcall	.+374    	; 0x1d0 <USI_SPI_wait>
			USI_SPI_putc(RANGE+1);	// Send temp value to SPI and increment
  5a:	80 91 60 00 	lds	r24, 0x0060
  5e:	8f 5f       	subi	r24, 0xFF	; 255
  60:	8b d0       	rcall	.+278    	; 0x178 <USI_SPI_putc>
			USI_SPI_wait();		// wait for transmission to finish
  62:	b6 d0       	rcall	.+364    	; 0x1d0 <USI_SPI_wait>
			USI_SPI_putc(RANGE+2);	// Send temp value to SPI and increment
  64:	80 91 60 00 	lds	r24, 0x0060
  68:	8e 5f       	subi	r24, 0xFE	; 254
  6a:	86 d0       	rcall	.+268    	; 0x178 <USI_SPI_putc>
			USI_SPI_wait();		// wait for transmission to finish
  6c:	b1 d0       	rcall	.+354    	; 0x1d0 <USI_SPI_wait>
  6e:	ec cf       	rjmp	.-40     	; 0x48 <main+0x8>

00000070 <adc_init>:
#include "proj_hdr.h"

/* Initialize ADC functionality */
void adc_init(void)
{
	ADMUX |= (0<<REFS1) | (0<<REFS0);	/* Vcc used as Vref, disconnect from PB0 */
  70:	87 b1       	in	r24, 0x07	; 7
  72:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);				/* ADC Left Adjust Result */
  74:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX |= 2;							/* Single Ended Input ADC2 selected */
  76:	39 9a       	sbi	0x07, 1	; 7
	ADCSRA |= (1<<ADEN);				/* ADC Enabled */
  78:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADIE);				/* ADC Interrupt Enabled */
  7a:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 3;						/* 8MHz Clk/64 = 125kHz, ADC Prescaler */
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	86 b9       	out	0x06, r24	; 6
	
	ADC_START;	/* Start ADC Conversion */
  82:	36 9a       	sbi	0x06, 6	; 6
}
  84:	08 95       	ret

00000086 <__vector_8>:

/* ADC finished conversion interrupt */
ISR(ADC_vect)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
	RANGE = ADCH;	/* Read ADC value into Range variable */
  92:	85 b1       	in	r24, 0x05	; 5
  94:	80 93 60 00 	sts	0x0060, r24
	ADC_START;	/* Start next ADC conversion */
  98:	36 9a       	sbi	0x06, 6	; 6
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_10>:
 *  results in one clock period on the clock pin and for the USI counter.
 */
/*#pragma vector=TIMER0_COMP_vect */	/* Compiler specific directive */
/*__interrupt void timer0comp_handler()*/
ISR(TIMER0_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	USICR |= (1<<USITC);	// Toggle clock output pin.
  b0:	68 9a       	sbi	0x0d, 0	; 13
}
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_13>:

/* USI SPI start condition interrupt */
ISR(USI_START_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
	/* not enabled */
}
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_14>:
 *  For all modes the USIDR contents are stored and flags are updated.
 */
/*#pragma vector=USI_OVF_vect*/	/* Compiler specific directive */
/*__interrupt void usiovf_handler()*/
ISR(USI_OVF_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	if( USI_SPI_status.masterMode == 1 ) {
  dc:	80 91 61 00 	lds	r24, 0x0061
  e0:	80 ff       	sbrs	r24, 0
  e2:	03 c0       	rjmp	.+6      	; 0xea <__vector_14+0x1a>
		TIMSK &= ~(1<<OCIE0A);
  e4:	89 b7       	in	r24, 0x39	; 57
  e6:	8f 7e       	andi	r24, 0xEF	; 239
  e8:	89 bf       	out	0x39, r24	; 57
	}
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	8e b9       	out	0x0e, r24	; 14
	USI_SPI_status.transferComplete = 1;
  ee:	80 91 61 00 	lds	r24, 0x0061
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 93 61 00 	sts	0x0061, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
  f8:	8f b1       	in	r24, 0x0f	; 15
  fa:	80 93 62 00 	sts	0x0062, r24
}
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <USI_SPI_initmaster>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initmaster(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
 10a:	87 b3       	in	r24, 0x17	; 23
 10c:	86 60       	ori	r24, 0x06	; 6
 10e:	87 bb       	out	0x17, r24	; 23
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
 110:	b8 98       	cbi	0x17, 0	; 23
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
 112:	c0 9a       	sbi	0x18, 0	; 24
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 114:	8a e5       	ldi	r24, 0x5A	; 90
 116:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0) |
	        (1<<USICLK);

	// Enable 'Clear Timer on Compare match' and init prescaler.
	TCCR0A = (1<<WGM01);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = TC0_PS_SETTING;
 11c:	83 bf       	out	0x33, r24	; 51
	
	// Init Output Compare Register.
	OCR0A = TC0_COMPARE_VALUE;
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	89 bd       	out	0x29, r24	; 41
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 1;
 122:	80 91 61 00 	lds	r24, 0x0061
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 93 61 00 	sts	0x0061, r24
	USI_SPI_status.transferComplete = 0;
 12c:	80 91 61 00 	lds	r24, 0x0061
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	80 93 61 00 	sts	0x0061, r24
	USI_SPI_status.writeCollision   = 0;
 136:	80 91 61 00 	lds	r24, 0x0061
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	80 93 61 00 	sts	0x0061, r24
	
	storedUSIDR = 0;
 140:	10 92 62 00 	sts	0x0062, r1
}
 144:	08 95       	ret

00000146 <USI_SPI_initslave>:
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initslave(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
 146:	b9 9a       	sbi	0x17, 1	; 23
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN); // Inputs.
 148:	b8 98       	cbi	0x17, 0	; 23
	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN);  // Pull-ups.
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	85 60       	ori	r24, 0x05	; 5
 14e:	88 bb       	out	0x18, r24	; 24
	
	// Configure USI to 3-wire slave mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
 150:	88 e5       	ldi	r24, 0x58	; 88
 152:	8d b9       	out	0x0d, r24	; 13
	        (1<<USICS1) | (SPI_MODE<<USICS0);
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 0;
 154:	80 91 61 00 	lds	r24, 0x0061
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	80 93 61 00 	sts	0x0061, r24
	USI_SPI_status.transferComplete = 0;
 15e:	80 91 61 00 	lds	r24, 0x0061
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 93 61 00 	sts	0x0061, r24
	USI_SPI_status.writeCollision   = 0;
 168:	80 91 61 00 	lds	r24, 0x0061
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	80 93 61 00 	sts	0x0061, r24
	
	storedUSIDR = 0;
 172:	10 92 62 00 	sts	0x0062, r1
}
 176:	08 95       	ret

00000178 <USI_SPI_putc>:
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
char USI_SPI_putc( unsigned char val )
{
 178:	28 2f       	mov	r18, r24
	// Check if transmission in progress,
	// i.e. USI counter unequal to zero.
	if( (USISR & 0x0F) != 0 ) {
 17a:	8e b1       	in	r24, 0x0e	; 14
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	90 70       	andi	r25, 0x00	; 0
 182:	89 2b       	or	r24, r25
 184:	31 f0       	breq	.+12     	; 0x192 <USI_SPI_putc+0x1a>
		// Indicate write collision and return.
		USI_SPI_status.writeCollision = 1;
 186:	80 91 61 00 	lds	r24, 0x0061
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	80 93 61 00 	sts	0x0061, r24
 190:	08 95       	ret
		return;
	}
	
	// Reinit flags.
	USI_SPI_status.transferComplete = 0;
 192:	80 91 61 00 	lds	r24, 0x0061
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	80 93 61 00 	sts	0x0061, r24
	USI_SPI_status.writeCollision = 0;
 19c:	80 91 61 00 	lds	r24, 0x0061
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	80 93 61 00 	sts	0x0061, r24

	// Put data in USI data register.
	USIDR = val;
 1a6:	2f b9       	out	0x0f, r18	; 15
	
	// Master should now enable compare match interrupts.
	if( USI_SPI_status.masterMode == 1 ) {
 1a8:	80 91 61 00 	lds	r24, 0x0061
 1ac:	80 ff       	sbrs	r24, 0
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <USI_SPI_putc+0x44>
		TIFR |= (1<<OCF0A);   // Clear compare match flag.
 1b0:	88 b7       	in	r24, 0x38	; 56
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	88 bf       	out	0x38, r24	; 56
		TIMSK |= (1<<OCIE0A); // Enable compare match interrupt.
 1b6:	89 b7       	in	r24, 0x39	; 57
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	89 bf       	out	0x39, r24	; 57
	}

	if( USI_SPI_status.writeCollision == 0 ) return 1;
 1bc:	80 91 61 00 	lds	r24, 0x0061
 1c0:	86 95       	lsr	r24
 1c2:	86 95       	lsr	r24
 1c4:	80 95       	com	r24
 1c6:	81 70       	andi	r24, 0x01	; 1
	return 0;
}
 1c8:	08 95       	ret

000001ca <USI_SPI_getc>:
 *  like you would read from the SPDR register in the native SPI module.
 */
unsigned char USI_SPI_getc(void)
{
	return storedUSIDR;
}
 1ca:	80 91 62 00 	lds	r24, 0x0062
 1ce:	08 95       	ret

000001d0 <USI_SPI_wait>:
 *  This function waits until the transfer complete flag is set.
 *  Use this function like you would wait for the native SPI interrupt flag.
 */
void USI_SPI_wait(void)
{
	do {} while( USI_SPI_status.transferComplete == 0 );
 1d0:	80 91 61 00 	lds	r24, 0x0061
 1d4:	81 ff       	sbrs	r24, 1
 1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <USI_SPI_wait>
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
