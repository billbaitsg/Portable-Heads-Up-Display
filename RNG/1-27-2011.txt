/***********************************************************
Bill Bai
Purdue ECET
Senior Project
Portable Heads Up Display

	Block:	Range Finder 

	Module:	Project header
	
	Desc.:	This file contains information useful to all
			modules in this block, namely global variables
			and include files
**********************************************************/

#ifndef PROJ_HDR_H
#define PROJ_HDR_H

/* Include Files */
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
/* Module Includes */
#include "adc.h"
#include "usi.h"
	
/* ADC Global Variables */
extern volatile char RANGE;

#endif

/***********************************************************
Bill Bai
Purdue ECET
Senior Project
Portable Heads Up Display

	Block:	Range Finder 

	Module:	Analog to Digital converter header
	
	Desc.:	This file contains the function prototypes and
			variable definitions for the ADC functions
**********************************************************/
#ifndef ADC_H
#define ADC_H
	/* ADC function prototypes */
	void adc_init(void);	/* Initialize ADC functionality */
	ISR(ADC_vect);	/* ADC finished conversion interrupt */
	
	/* ADC Macros */
	#define ADC_START (ADCSRA |= (1<<ADSC))
#endif

/***********************************************************
Bill Bai
Purdue ECET
Senior Project
Portable Heads Up Display

	Block:	Range Finder 

	Module:	Analog to Digital converter Functions
	
	Desc.:	This file contains the source code for the 
			ADC functions
**********************************************************/

#include "proj_hdr.h"

/* Initialize ADC functionality */
void adc_init(void)
{
	ADMUX |= (0<<REFS1) | (0<<REFS0);	/* Vcc used as Vref, disconnect from PB0 */
	ADMUX |= (1<<ADLAR);				/* ADC Left Adjust Result */
	ADMUX |= 2;							/* Single Ended Input ADC2 selected */
	ADCSRA |= (1<<ADEN);				/* ADC Enabled */
	ADCSRA |= (1<<ADIE);				/* ADC Interrupt Enabled */
	ADCSRA |= 3;						/* 8MHz Clk/64 = 125kHz, ADC Prescaler */
	
	ADC_START;	/* Start ADC Conversion */
}

/* ADC finished conversion interrupt */
ISR(ADC_vect)
{
	RANGE = ADCH;	/* Read ADC value into Range variable */
	ADC_START;	/* Start next ADC conversion */
}

/***********************************************************
Bill Bai
Purdue ECET
Senior Project
Portable Heads Up Display

	Block:	Range Finder 
	
	Module:	Universal Serial Interface functions
	
	Desc.:	This file contains the source code for the USI
			functions.  This code is originally from the 
			AVR Appnote AVR319 - Using the USI module for
			SPI communications.  I have ported the code 
			over to the WinAVR compiler.
**********************************************************/

#include "proj_hdr.h"

/*! \brief  Data input register buffer.
 *
 *  Incoming bytes are stored in this byte until the next transfer is complete.
 *  This byte can be used the same way as the SPI data register in the native
 *  SPI module, which means that the byte must be read before the next transfer
 *  completes and overwrites the current value.
 */
unsigned char storedUSIDR;

/*! \brief  Driver status bit structure.
 *
 *  This struct contains status flags for the driver.
 *  The flags have the same meaning as the corresponding status flags
 *  for the native SPI module. The flags should not be changed by the user.
 *  The driver takes care of updating the flags when required.
 */
struct usidriverStatus_t {
	unsigned char masterMode : 1;       //!< True if in master mode.
	unsigned char transferComplete : 1; //!< True when transfer completed.
	unsigned char writeCollision : 1;   //!< True if put attempted during transfer.
};

volatile struct usidriverStatus_t USI_SPI_status; //!< The driver status bits.

/*! \brief  Timer/Counter 0 Compare Match Interrupt handler.
 *
 *  This interrupt handler is only enabled when transferring data
 *  in master mode. It toggles the USI clock pin, i.e. two interrupts
 *  results in one clock period on the clock pin and for the USI counter.
 */
/*#pragma vector=TIMER0_COMP_vect */	/* Compiler specific directive */
/*__interrupt void timer0comp_handler()*/
ISR(TIMER0_COMPA_vect)
{
	USICR |= (1<<USITC);	// Toggle clock output pin.
}

/* USI SPI start condition interrupt */
ISR(USI_START_vect)
{
	/* not enabled */
}

/*! \brief  USI Timer Overflow Interrupt handler.
 *
 *  This handler disables the compare match interrupt if in master mode.
 *  When the USI counter overflows, a byte has been transferred, and we
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
/*#pragma vector=USI_OVF_vect*/	/* Compiler specific directive */
/*__interrupt void usiovf_handler()*/
ISR(USI_OVF_vect)
{
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	if( USI_SPI_status.masterMode == 1 ) {
		TIMSK &= ~(1<<OCIE0A);
	}
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
	USI_SPI_status.transferComplete = 1;

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
}

/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initmaster(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
	        (1<<USICS1) | (SPI_MODE<<USICS0) |
	        (1<<USICLK);

	// Enable 'Clear Timer on Compare match' and init prescaler.
	TCCR0A = (1<<WGM01);
	TCCR0B = TC0_PS_SETTING;
	
	// Init Output Compare Register.
	OCR0A = TC0_COMPARE_VALUE;
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 1;
	USI_SPI_status.transferComplete = 0;
	USI_SPI_status.writeCollision   = 0;
	
	storedUSIDR = 0;
}

/*! \brief  Initialize USI as SPI slave.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from master to slave mode.
 *  Note that the stored USIDR value is cleared.
 *
 *  \param spi_mode  Required SPI mode, must be 0 or 1.
 */
void USI_SPI_initslave(void)
{
	// Configure port directions.
	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN); // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN);  // Pull-ups.
	
	// Configure USI to 3-wire slave mode with overflow interrupt.
	USICR = (1<<USIOIE) | (1<<USIWM0) |
	        (1<<USICS1) | (SPI_MODE<<USICS0);
	
	// Init driver status register.
	USI_SPI_status.masterMode       = 0;
	USI_SPI_status.transferComplete = 0;
	USI_SPI_status.writeCollision   = 0;
	
	storedUSIDR = 0;
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
char USI_SPI_putc( unsigned char val )
{
	// Check if transmission in progress,
	// i.e. USI counter unequal to zero.
	if( (USISR & 0x0F) != 0 ) {
		// Indicate write collision and return.
		USI_SPI_status.writeCollision = 1;
		return;
	}
	
	// Reinit flags.
	USI_SPI_status.transferComplete = 0;
	USI_SPI_status.writeCollision = 0;

	// Put data in USI data register.
	USIDR = val;
	
	// Master should now enable compare match interrupts.
	if( USI_SPI_status.masterMode == 1 ) {
		TIFR |= (1<<OCF0A);   // Clear compare match flag.
		TIMSK |= (1<<OCIE0A); // Enable compare match interrupt.
	}

	if( USI_SPI_status.writeCollision == 0 ) return 1;
	return 0;
}

/*! \brief  Get one byte from bus.
 *
 *  This function only returns the previous stored USIDR value.
 *  The transfer complete flag is not checked. Use this function
 *  like you would read from the SPDR register in the native SPI module.
 */
unsigned char USI_SPI_getc(void)
{
	return storedUSIDR;
}

/*! \brief  Wait for transfer to complete.
 *
 *  This function waits until the transfer complete flag is set.
 *  Use this function like you would wait for the native SPI interrupt flag.
 */
void USI_SPI_wait(void)
{
	do {} while( USI_SPI_status.transferComplete == 0 );
}

/***********************************************************
Bill Bai
Purdue ECET
Senior Project
Portable Heads Up Display

	Block:	Range Finder 
	
	Module:	Universal Serial Interface header
	
	Desc.:	This file contains the global variables for 
			the USI	functions.  This code is originally 
			from the AVR Appnote AVR319 - Using the USI 
			module for SPI communications.  I have ported 
			the code over to the WinAVR compiler.
**********************************************************/

#ifndef USI_H
#define USI_H
	/* Set SPI bus mode */
	#define SPI_MODE 0	/* Sample on leading _rising_ edge, setup on trailing _falling_ edge. */
	//#define SPI_MODE 1	/* Sample on leading _falling_ edge, setup on trailing _rising_ edge. */

	/* USI port and pin definitions. */
	#define USI_OUT_REG		PORTB	//!< USI port output register.
	#define USI_IN_REG		PINB	//!< USI port input register.
	#define USI_DIR_REG		DDRB	//!< USI port direction register.
	#define USI_CLOCK_PIN	2		//!< USI clock I/O pin.
	#define USI_SELECT_PIN	0
	#define USI_DATAIN_PIN	0		//!< USI data input pin.
	#define USI_DATAOUT_PIN	1		//!< USI data output pin.

	/*  Speed configuration:
	 *  Bits per second = CPUSPEED / PRESCALER / (COMPAREVALUE+1) / 2.
	 *  Maximum = CPUSPEED / 64.
	 *	8MHz / 64 = 125kHz
	 *	125kHz = 8MHz / 8 / (3+1) / 2
	 *	Prescaler = 8
	 *	Compare Value = 3
	 */
	#define TC0_PRESCALER_VALUE 8	//!< Must be 1, 8, 64, 256 or 1024.
	#define TC0_COMPARE_VALUE   3	//!< Must be 0 to 255. Minimum 31 with prescaler CLK/1.

	/*  Prescaler value converted to bit settings. */
	#if TC0_PRESCALER_VALUE == 1
		#define TC0_PS_SETTING (1<<CS00)
	#elif TC0_PRESCALER_VALUE == 8
		#define TC0_PS_SETTING (1<<CS01)
	#elif TC0_PRESCALER_VALUE == 64
		#define TC0_PS_SETTING (1<<CS01)|(1<<CS00)
	#elif TC0_PRESCALER_VALUE == 256
		#define TC0_PS_SETTING (1<<CS02)
	#elif TC0_PRESCALER_VALUE == 1024
		#define TC0_PS_SETTING (1<<CS02)|(1<<CS00)
	#else
		#error Invalid T/C0 prescaler setting.
	#endif
	
	/* Function Prototypes */
	ISR(TIMER0_COMPA_vect);
	ISR(USI_START_vect);
	ISR(USI_OVF_vect);
	void USI_SPI_initmaster(void);
	void USI_SPI_initslave(void);
	char USI_SPI_putc(unsigned char);
	unsigned char USI_SPI_getc(void);
	void USI_SPI_wait(void);
#endif

/***********************************************************
Bill Bai
Purdue ECET
Senior Project
Portable Heads Up Display

	Block:	Range Finder 
	
	Module:	Main program
	
	Desc.:	This is the main program section of the 
			accelerometer microcontroller 1
**********************************************************/

#include "proj_hdr.h"	/* Include project header file */

/* Global Variables for ADC readings */
volatile char RANGE = 0;	/* Range to object */

int main(void)7
{
	/* Local Variables */
	unsigned char cmd = 0;
	
	/* Initialize software modules */
	adc_init();	/* Initialize ADC */
	USI_SPI_initslave();	/* Initialize SPI as slave */
	
	sei();	/* Enable global interrupts */
	
	while(1)
	{
		cmd = USI_SPI_getc();
		USI_SPI_wait();
		if( cmd == 'R' )	/* if the X axis is requested */
		{
			USI_SPI_putc(RANGE);	// Send temp value to SPI and increment
			USI_SPI_wait();		// wait for transmission to finish
		}
		else{}	/* all other requests, do nothing */
	}	/* End of while */
	return 0;
}	/* End of main */