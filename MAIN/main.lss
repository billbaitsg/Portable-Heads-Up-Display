
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002fc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e6  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000252  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f5  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003cf  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000126  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cb  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
volatile unsigned char HOURS = 10;	/* Hour of the current time */
volatile unsigned char MINUTES = 11;	/* Minutes of the current hour */
volatile unsigned char SECONDS = 12;	/* Seconds of the current hour */

int main(void)
{
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
	/* Local Variables */
	unsigned char hbyte = 0;	/* Upper byte */
	unsigned char lbyte = 0;	/* Lower byte */
	
	/* Initialize software modules */
	SPI_MasterInit();	/* Initialize SPI */
  a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <SPI_MasterInit>
	
	/* I/O Initialization */
	DDRD = 0xFF;	/* Set PortD outputs */
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	
	/* Set all slave selects to high (not selected) */
	ACC_SS_1;	/* Accelerometer slave select high (not selected) */
  ac:	5b 9a       	sbi	0x0b, 3	; 11
	GPS_SS_1;	/* GPS slave select high (not selected) */
  ae:	5d 9a       	sbi	0x0b, 5	; 11
	AMB_SS_1;	/* Ambient slave select high (not selected) */
  b0:	5e 9a       	sbi	0x0b, 6	; 11
	RNG_SS_1;	/* Range slave select high (not selected) */
  b2:	5c 9a       	sbi	0x0b, 4	; 11
	DIS_SS_1;	/* Display slave select high (not selected) */	
  b4:	5f 9a       	sbi	0x0b, 7	; 11
	
	sei();	/* Enable global interrupts */
  b6:	78 94       	sei
	
	while(1)
	{
		/* Query the sensor blocks for sensor data */
		/* Query the Accelerometer block */
		ACC_SS_0;					/* Accelerometer slave select low (selected) */
  b8:	5b 98       	cbi	0x0b, 3	; 11
			/* X-axis */
			SPI_putc('X');			/* Query ACC block for X-axis */
  ba:	88 e5       	ldi	r24, 0x58	; 88
  bc:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			X_AXIS = SPI_getc();	/* Read X-axis value from SPI */
  c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
  ca:	80 93 00 01 	sts	0x0100, r24
			/* Y-axis */
			SPI_putc('Y');			/* Query ACC block for Y-axis */
  ce:	89 e5       	ldi	r24, 0x59	; 89
  d0:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			Y_AXIS = SPI_getc();	/* Read Y-axis value from SPI */
  da:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
  de:	80 93 01 01 	sts	0x0101, r24
			/* Z-axis */
			SPI_putc('Z');			/* Query ACC block for Z-axis */
  e2:	8a e5       	ldi	r24, 0x5A	; 90
  e4:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			Z_AXIS = SPI_getc();	/* Read Z-axis value from SPI */
  ee:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
  f2:	80 93 02 01 	sts	0x0102, r24
		ACC_SS_1;					/* Accelerometer slave select high (not selected) */
  f6:	5b 9a       	sbi	0x0b, 3	; 11
		
		/* Query the Ambient Light block */
		AMB_SS_0;					/* Ambient slave select low (selected) */
  f8:	5e 98       	cbi	0x0b, 6	; 11
			/* Light Level */
			SPI_putc('L');			/* Query AMB block for Light level */
  fa:	8c e4       	ldi	r24, 0x4C	; 76
  fc:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			LIGHT = SPI_getc();		/* Read Light value from SPI */
 106:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 10a:	80 93 04 01 	sts	0x0104, r24
		AMB_SS_1;					/* Ambient slave select high (not selected) */
 10e:	5e 9a       	sbi	0x0b, 6	; 11
		
		/* Query the Range block */
		RNG_SS_0;					/* Range slave select low (selected) */
 110:	5c 98       	cbi	0x0b, 4	; 11
			/* Range */
			SPI_putc('R');			/* Query RNG block for range distance */
 112:	82 e5       	ldi	r24, 0x52	; 82
 114:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			RANGE = SPI_getc();		/* Read Range value from SPI */
 11e:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 122:	80 93 03 01 	sts	0x0103, r24
		RNG_SS_1;					/* Range slave select high (not selected) */
 126:	5c 9a       	sbi	0x0b, 4	; 11
		
		/* Query the GPS block */
		GPS_SS_0;					/* GPS slave select high (selected) */
 128:	5d 98       	cbi	0x0b, 5	; 11
			/* Altitude */
			SPI_putc('A');			/* Query GPS block for altitude */
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			hbyte = SPI_getc();		/* Read Altitude high byte value from SPI */
 136:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 13a:	18 2f       	mov	r17, r24
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			lbyte = SPI_getc();		/* Read Altitude low byte value from SPI */
 142:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
			ALTITUDE = (hbyte<<8) & lbyte;	/* Save Altitude value */
 146:	d1 2e       	mov	r13, r17
 148:	cc 24       	eor	r12, r12
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	8c 21       	and	r24, r12
 14e:	9d 21       	and	r25, r13
 150:	90 93 06 01 	sts	0x0106, r25
 154:	80 93 05 01 	sts	0x0105, r24
			/* Speed */
			SPI_putc('V');			/* Query GPS block for speed */
 158:	86 e5       	ldi	r24, 0x56	; 86
 15a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			hbyte = SPI_getc();		/* Read Speed high byte value from SPI */
 164:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 168:	18 2f       	mov	r17, r24
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			lbyte = SPI_getc();		/* Read Speed low byte value from SPI */
 170:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
			SPEED = (hbyte<<8) & lbyte;	/* Save Speed value */
 174:	f1 2e       	mov	r15, r17
 176:	ee 24       	eor	r14, r14
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	8e 21       	and	r24, r14
 17c:	9f 21       	and	r25, r15
 17e:	90 93 08 01 	sts	0x0108, r25
 182:	80 93 07 01 	sts	0x0107, r24
			/* Bearing */
			SPI_putc('B');			/* Query GPS block for Bearing */
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			hbyte = SPI_getc();		/* Read Bearing high byte value from SPI */
 192:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 196:	18 2f       	mov	r17, r24
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			lbyte = SPI_getc();		/* Read Bearing low byte value from SPI */
 19e:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
			BEARING = (hbyte<<8) & lbyte;	/* Save Heading value */
 1a2:	d1 2f       	mov	r29, r17
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8c 23       	and	r24, r28
 1aa:	9d 23       	and	r25, r29
 1ac:	90 93 0a 01 	sts	0x010A, r25
 1b0:	80 93 09 01 	sts	0x0109, r24
			/* Time */
			/* Hour */
			SPI_putc('H');			/* Query GPS block for Minutes */
 1b4:	88 e4       	ldi	r24, 0x48	; 72
 1b6:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			HOURS = SPI_getc();		/* Read Hours value from SPI */
 1c0:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 1c4:	80 93 0b 01 	sts	0x010B, r24
			/* Minutes */
			SPI_putc('M');			/* Query GPS block for Minutes */
 1c8:	8d e4       	ldi	r24, 0x4D	; 77
 1ca:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			MINUTES = SPI_getc();	/* Read Minutes value from SPI */
 1d4:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 1d8:	80 93 0c 01 	sts	0x010C, r24
			/* Seconds */
			SPI_putc('S');			/* Query GPS block for Seconds */
 1dc:	83 e5       	ldi	r24, 0x53	; 83
 1de:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SECONDS = SPI_getc();	/* Read Seconds value from SPI */			
 1e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_getc>
 1ec:	80 93 0d 01 	sts	0x010D, r24
		GPS_SS_1;	/* GPS slave select high (not selected) */
 1f0:	5d 9a       	sbi	0x0b, 5	; 11
		
		/* Send data to Display Controller */
		DIS_SS_0;	/* Display slave select low (selected) */
 1f2:	5f 98       	cbi	0x0b, 7	; 11
			/* X-axis */
			SPI_putc('x');			/* Prepare Display Controller for X-axis value */
 1f4:	88 e7       	ldi	r24, 0x78	; 120
 1f6:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(X_AXIS);		/* Send X-axis value to Display Controller */
 1fa:	80 91 00 01 	lds	r24, 0x0100
 1fe:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Y-axis */
			SPI_putc('y');			/* Prepare Display Controller for Y-axis value */
 202:	89 e7       	ldi	r24, 0x79	; 121
 204:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(Y_AXIS);		/* Send Y-axis value to Display Controller */
 208:	80 91 01 01 	lds	r24, 0x0101
 20c:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Z-axis */
			SPI_putc('z');			/* Prepare Display Controller for Z-axis value */
 210:	8a e7       	ldi	r24, 0x7A	; 122
 212:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(Z_AXIS);		/* Send Z-axis value to Display Controller */
 216:	80 91 02 01 	lds	r24, 0x0102
 21a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Ambient Light */
			SPI_putc('l');			/* Prepare Display Controller for Ambient Light value */
 21e:	8c e6       	ldi	r24, 0x6C	; 108
 220:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(LIGHT);		/* Send Ambient Light value to Display Controller */
 224:	80 91 04 01 	lds	r24, 0x0104
 228:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Range */
			SPI_putc('r');			/* Prepare Display Controller for Range value */
 22c:	82 e7       	ldi	r24, 0x72	; 114
 22e:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(RANGE);		/* Send Range value to Display Controller */
 232:	80 91 03 01 	lds	r24, 0x0103
 236:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Altitude */
			SPI_putc('a');			/* Prepare Display Controller for Altitude value */
 23a:	81 e6       	ldi	r24, 0x61	; 97
 23c:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc( (char)(ALTITUDE>>8) );	/* Send high byte of Altitude to Display Controller */
 240:	80 91 05 01 	lds	r24, 0x0105
 244:	90 91 06 01 	lds	r25, 0x0106
 248:	89 2f       	mov	r24, r25
 24a:	99 0f       	add	r25, r25
 24c:	99 0b       	sbc	r25, r25
 24e:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc( (char)(ALTITUDE) );		/* Send low byte of Altitude to Display Controller */
 252:	80 91 05 01 	lds	r24, 0x0105
 256:	90 91 06 01 	lds	r25, 0x0106
 25a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Speed */
			SPI_putc('v');			/* Prepare Display Controller for Speed value */
 25e:	86 e7       	ldi	r24, 0x76	; 118
 260:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc( (char)(SPEED>>8) );		/* Send high byte of Speed to Display Controller */
 264:	80 91 07 01 	lds	r24, 0x0107
 268:	90 91 08 01 	lds	r25, 0x0108
 26c:	89 2f       	mov	r24, r25
 26e:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc( (char)(SPEED) );			/* Send low byte of Speed to Display Controller */
 272:	80 91 07 01 	lds	r24, 0x0107
 276:	90 91 08 01 	lds	r25, 0x0108
 27a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Bearing */
			SPI_putc('b');			/* Prepare Display Controller for Bearing value */
 27e:	82 e6       	ldi	r24, 0x62	; 98
 280:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc( (char)(BEARING>>8) );		/* Send high byte of Bearing to Display Controller */
 284:	80 91 09 01 	lds	r24, 0x0109
 288:	90 91 0a 01 	lds	r25, 0x010A
 28c:	89 2f       	mov	r24, r25
 28e:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc( (char)(BEARING) );		/* Send low byte of Bearing to Display Controller */
 292:	80 91 09 01 	lds	r24, 0x0109
 296:	90 91 0a 01 	lds	r25, 0x010A
 29a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Time */
			/* Hour */
			SPI_putc('h');			/* Prepare Display Controller for Hours value */
 29e:	88 e6       	ldi	r24, 0x68	; 104
 2a0:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(HOURS);		/* Send Hours value to Display Controller */
 2a4:	80 91 0b 01 	lds	r24, 0x010B
 2a8:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Minutes */
			SPI_putc('m');			/* Prepare Display Controller for Minutes value */
 2ac:	8d e6       	ldi	r24, 0x6D	; 109
 2ae:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(MINUTES);		/* Send Minutes value to Display Controller */
 2b2:	80 91 0c 01 	lds	r24, 0x010C
 2b6:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			/* Seconds */
			SPI_putc('s');			/* Prepare Display Controller for Seconds value */
 2ba:	83 e7       	ldi	r24, 0x73	; 115
 2bc:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
			SPI_putc(SECONDS);		/* Send Seconds value to Display Controller */
 2c0:	80 91 0d 01 	lds	r24, 0x010D
 2c4:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_putc>
		DIS_SS_1;	/* Display slave select high (not selected) */	
 2c8:	5f 9a       	sbi	0x0b, 7	; 11
 2ca:	f6 ce       	rjmp	.-532    	; 0xb8 <main+0x22>

000002cc <SPI_MasterInit>:

/* Initialize SPI for master mode */
void SPI_MasterInit(void)
{
	/* Cofigure SSn, MOSI, and SCK as output */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SSN);
 2cc:	8c e2       	ldi	r24, 0x2C	; 44
 2ce:	84 b9       	out	0x04, r24	; 4
	/* Set SPE and MSTR of the SPCR register */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
 2d0:	82 e5       	ldi	r24, 0x52	; 82
 2d2:	8c bd       	out	0x2c, r24	; 44
	/* Clear SPI Interrupt Flag by reading SPSR and SPDR */
	char read;
	read = SPSR;
 2d4:	8d b5       	in	r24, 0x2d	; 45
	read = SPDR;
 2d6:	8e b5       	in	r24, 0x2e	; 46
}
 2d8:	08 95       	ret

000002da <SPI_putc>:

/* Transmit a byte of data via the SPI bus in master mode */
void SPI_putc(char cData)
{
	/* Start transmission */
	SPDR = cData;
 2da:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 2dc:	0d b4       	in	r0, 0x2d	; 45
 2de:	07 fe       	sbrs	r0, 7
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <SPI_putc+0x2>
}
 2e2:	08 95       	ret

000002e4 <SPI_SlaveInit>:

/* Initialize the SPI for slave mode */
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPIE)|(1<<SPE);
 2e8:	80 ec       	ldi	r24, 0xC0	; 192
 2ea:	8c bd       	out	0x2c, r24	; 44
}
 2ec:	08 95       	ret

000002ee <SPI_getc>:

/* Recieve a byte of data via the SPI bus in slave mode */
char SPI_getc(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 2ee:	0d b4       	in	r0, 0x2d	; 45
 2f0:	07 fe       	sbrs	r0, 7
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <SPI_getc>
	;
	/* Return Data Register */
	return SPDR;
 2f4:	8e b5       	in	r24, 0x2e	; 46
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
