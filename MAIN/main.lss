
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800100  00800100  00000176  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e6  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024a  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f3  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a7  00000000  00000000  000005d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000126  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	/* Local Variables */
	unsigned char hbyte = 0;	/* Upper byte */
	unsigned char lbyte = 0;	/* Lower byte */
	
	/* Initialize software modules */
	SPI_MasterInit();	/* Initialize SPI */
  90:	0e 94 69 00 	call	0xd2	; 0xd2 <SPI_MasterInit>
	
	/* I/O Initialization */
	DDRD = 0xFF;	/* Set PortD outputs */
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a b9       	out	0x0a, r24	; 10
	
	/* Set all slave selects to high (not selected) */
	ACC_SS_1;	/* Accelerometer slave select high (not selected) */
  98:	5b 9a       	sbi	0x0b, 3	; 11
	GPS_SS_1;	/* GPS slave select high (not selected) */
  9a:	5d 9a       	sbi	0x0b, 5	; 11
	AMB_SS_1;	/* Ambient slave select high (not selected) */
  9c:	5e 9a       	sbi	0x0b, 6	; 11
	RNG_SS_1;	/* Range slave select high (not selected) */
  9e:	5c 9a       	sbi	0x0b, 4	; 11
	DIS_SS_1;	/* Display slave select high (not selected) */	
  a0:	5f 9a       	sbi	0x0b, 7	; 11
	
	sei();	/* Enable global interrupts */
  a2:	78 94       	sei
	
	while(1)
	{
		/* Query the sensor blocks for sensor data */
		/* Query the Accelerometer block */
		ACC_SS_0;					/* Accelerometer slave select low (selected) */
  a4:	5b 98       	cbi	0x0b, 3	; 11
			/* X-axis */
			SPI_putc('X');			/* Query ACC block for X-axis */
  a6:	88 e5       	ldi	r24, 0x58	; 88
  a8:	0e 94 70 00 	call	0xe0	; 0xe0 <SPI_putc>
			SPI_putc('!');			/* Dummy send to clock SPI */
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	0e 94 70 00 	call	0xe0	; 0xe0 <SPI_putc>
			X_AXIS = SPI_getc();	/* Read X-axis value from SPI */
  b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_getc>
  b6:	80 93 00 01 	sts	0x0100, r24
			/* Y-axis */
			SPI_putc('Y');			/* Query ACC block for Y-axis */
  ba:	89 e5       	ldi	r24, 0x59	; 89
  bc:	0e 94 70 00 	call	0xe0	; 0xe0 <SPI_putc>
			SPI_putc('!');			/* Dummy send to clock SPI */
  c0:	81 e2       	ldi	r24, 0x21	; 33
  c2:	0e 94 70 00 	call	0xe0	; 0xe0 <SPI_putc>
			Y_AXIS = SPI_getc();	/* Read Y-axis value from SPI */
  c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_getc>
  ca:	80 93 01 01 	sts	0x0101, r24
			// /* Z-axis */
			// SPI_putc('Z');			/* Query ACC block for Z-axis */
			// SPI_putc('!');			/* Dummy send to clock SPI */
			// Z_AXIS = SPI_getc();	/* Read Z-axis value from SPI */
		ACC_SS_1;					/* Accelerometer slave select high (not selected) */
  ce:	5b 9a       	sbi	0x0b, 3	; 11
  d0:	e9 cf       	rjmp	.-46     	; 0xa4 <main+0x14>

000000d2 <SPI_MasterInit>:

/* Initialize SPI for master mode */
void SPI_MasterInit(void)
{
	/* Cofigure SSn, MOSI, and SCK as output */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SSN);
  d2:	8c e2       	ldi	r24, 0x2C	; 44
  d4:	84 b9       	out	0x04, r24	; 4
	/* Set SPE and MSTR of the SPCR register */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
  d6:	82 e5       	ldi	r24, 0x52	; 82
  d8:	8c bd       	out	0x2c, r24	; 44
	/* Clear SPI Interrupt Flag by reading SPSR and SPDR */
	char read;
	read = SPSR;
  da:	8d b5       	in	r24, 0x2d	; 45
	read = SPDR;
  dc:	8e b5       	in	r24, 0x2e	; 46
}
  de:	08 95       	ret

000000e0 <SPI_putc>:

/* Transmit a byte of data via the SPI bus in master mode */
void SPI_putc(char cData)
{
	/* Start transmission */
	SPDR = cData;
  e0:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <SPI_putc+0x2>
}
  e8:	08 95       	ret

000000ea <SPI_SlaveInit>:

/* Initialize the SPI for slave mode */
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPIE)|(1<<SPE);
  ee:	80 ec       	ldi	r24, 0xC0	; 192
  f0:	8c bd       	out	0x2c, r24	; 44
}
  f2:	08 95       	ret

000000f4 <SPI_getc>:

/* Recieve a byte of data via the SPI bus in slave mode */
char SPI_getc(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_getc>
	;
	/* Return Data Register */
	return SPDR;
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
