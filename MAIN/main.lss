
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  00000220  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000132  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b2  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000022e  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000323  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b2  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000099  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define FOSC 8000000 // Clock Speed
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	/* Local Variables */
	unsigned char cmd = 0;
	
	/* Initialize software modules */
	UART_init(MYUBRR);
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_init>
	
	sei();	/* Enable global interrupts */
  9c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	c8 ec       	ldi	r28, 0xC8	; 200
  a0:	d0 e0       	ldi	r29, 0x00	; 0
	char hi[] = "Hello World!\n\r";
	char *txt = hi;
	
	while(1)
	{
		UART_putc('x');
  a2:	88 e7       	ldi	r24, 0x78	; 120
  a4:	0e 94 81 00 	call	0x102	; 0x102 <UART_putc>
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	97 e2       	ldi	r25, 0x27	; 39
  ac:	fe 01       	movw	r30, r28
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b4:	d9 f7       	brne	.-10     	; 0xac <main+0x1c>
  b6:	f5 cf       	rjmp	.-22     	; 0xa2 <main+0x12>

000000b8 <SPI_MasterInit>:

/* Initialize SPI for master mode */
void SPI_MasterInit(void)
{
	/* Cofigure SSn, MOSI, and SCK as output */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SSN);
  b8:	8c e2       	ldi	r24, 0x2C	; 44
  ba:	84 b9       	out	0x04, r24	; 4
	/* Set SPE and MSTR of the SPCR register */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
  bc:	82 e5       	ldi	r24, 0x52	; 82
  be:	8c bd       	out	0x2c, r24	; 44
	/* Clear SPI Interrupt Flag by reading SPSR and SPDR */
	char read;
	read = SPSR;
  c0:	8d b5       	in	r24, 0x2d	; 45
	read = SPDR;
  c2:	8e b5       	in	r24, 0x2e	; 46
}
  c4:	08 95       	ret

000000c6 <SPI_MasterTransmit>:

/* Transmit a byte of data via the SPI bus in master mode */
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  c6:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <SPI_MasterTransmit+0x2>
}
  ce:	08 95       	ret

000000d0 <SPI_SlaveInit>:

/* Initialize the SPI for slave mode */
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPIE)|(1<<SPE);
  d4:	80 ec       	ldi	r24, 0xC0	; 192
  d6:	8c bd       	out	0x2c, r24	; 44
}
  d8:	08 95       	ret

000000da <SPI_SlaveReceive>:

/* Recieve a byte of data via the SPI bus in slave mode */
char SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	08 95       	ret

000000e4 <UART_init>:

/* Initialize UART module, from datasheet */
void UART_init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  e4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  e8:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	80 83       	st	Z, r24
	/* Set frame format: 8 data, 1 stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable the USART Recieve Complete interrupt (USART_RXC) */
	UCSR0B |= (1<<RXCIE0);	
  fa:	80 81       	ld	r24, Z
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	80 83       	st	Z, r24
}
 100:	08 95       	ret

00000102 <UART_putc>:

/* Send a byte via UART, from datasheet */
void UART_putc( unsigned char data )
{
 102:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 104:	80 91 c0 00 	lds	r24, 0x00C0
 108:	85 ff       	sbrs	r24, 5
 10a:	fc cf       	rjmp	.-8      	; 0x104 <UART_putc+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 10c:	90 93 c6 00 	sts	0x00C6, r25
}
 110:	08 95       	ret

00000112 <UART_getc>:

/* Get a byte via UART, from datasheet */
unsigned char UART_getc( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 112:	80 91 c0 00 	lds	r24, 0x00C0
 116:	87 ff       	sbrs	r24, 7
 118:	fc cf       	rjmp	.-8      	; 0x112 <UART_getc>
	/* Get and return received data from buffer */
	return UDR0;
 11a:	80 91 c6 00 	lds	r24, 0x00C6
}
 11e:	08 95       	ret

00000120 <UART_flush>:

/* Flush out the UART receive buffer, from datasheet */
void UART_flush( void )
{
 120:	02 c0       	rjmp	.+4      	; 0x126 <UART_flush+0x6>
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 122:	80 91 c6 00 	lds	r24, 0x00C6
 126:	80 91 c0 00 	lds	r24, 0x00C0
 12a:	87 fd       	sbrc	r24, 7
 12c:	fa cf       	rjmp	.-12     	; 0x122 <UART_flush+0x2>
}
 12e:	08 95       	ret

00000130 <USART_RXC_vect>:

/* UART receive complete interrupt */
ISR( USART_RXC_vect )
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	/* Wait for completion of transmit (should be redundant) */
	while ( !(UCSR0A & (1<<RXC0)) );	
 142:	80 91 c0 00 	lds	r24, 0x00C0
 146:	87 ff       	sbrs	r24, 7
 148:	fc cf       	rjmp	.-8      	; 0x142 <USART_RXC_vect+0x12>
	/* if BUFFER_SIZE is reached, reset to start of buffer */
	if (UART_BUF_CNT==UART_BUFFER_SIZE) 
 14a:	80 91 00 01 	lds	r24, 0x0100
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	11 f4       	brne	.+4      	; 0x156 <USART_RXC_vect+0x26>
	{
		UART_BUF_CNT=0;
 152:	10 92 00 01 	sts	0x0100, r1
	}/* End of if */
	/* Put character in buffer and increment counter */
	UART_BUFFER[UART_BUF_CNT++] = UDR0;
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 91 c6 00 	lds	r25, 0x00C6
 162:	ee 5f       	subi	r30, 0xFE	; 254
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	90 83       	st	Z, r25
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 00 01 	sts	0x0100, r24
	/* Put up UART recieve byte complete flag */
	//UART_FLAGS |= (1<<UART_RXC);	
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <USART_TXC_vect>:

/* UART transmit complete interrupt */
ISR( USART_TXC_vect )
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
	
}
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <USART_DRE_vect>:

/* UART data register empty */
ISR( USART_DRE_vect )
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1

 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
