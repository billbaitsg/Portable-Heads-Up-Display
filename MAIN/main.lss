
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000408  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000010f  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000efa  00000000  00000000  000005d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bb  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007af  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b0  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000407  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	unsigned char avg(unsigned char []);	/* Calculate the average of the array */
	void add(unsigned char [], unsigned char);	/* Add a new value to the array */
#endif

int main(void)
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	/* Local Variables */
	unsigned char hbyte = 0;	/* Upper byte */
	unsigned char lbyte = 0;	/* Lower byte */
	
	/* Initialize software modules */
	SPI_MasterInit();	/* Initialize SPI */
  9e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SPI_MasterInit>
	
	/* I/O Initialization */
	DDRD = 0xFF;	/* Set PortD outputs */
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a b9       	out	0x0a, r24	; 10
	
	/* Set all slave selects to high (not selected) */
	ACC_SS_1;	/* Accelerometer slave select high (not selected) */
  a6:	5b 9a       	sbi	0x0b, 3	; 11
	GPS_SS_1;	/* GPS slave select high (not selected) */
  a8:	5d 9a       	sbi	0x0b, 5	; 11
	AMB_SS_1;	/* Ambient slave select high (not selected) */
  aa:	5e 9a       	sbi	0x0b, 6	; 11
	RNG_SS_1;	/* Range slave select high (not selected) */
  ac:	5c 9a       	sbi	0x0b, 4	; 11
	DIS_SS_1;	/* Display slave select high (not selected) */	
  ae:	5f 9a       	sbi	0x0b, 7	; 11
	
	sei();	/* Enable global interrupts */
  b0:	78 94       	sei
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b2:	12 e4       	ldi	r17, 0x42	; 66
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	cc e2       	ldi	r28, 0x2C	; 44
  b6:	d1 e0       	ldi	r29, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b8:	05 e8       	ldi	r16, 0x85	; 133
				ARRAY_COUNT = 0;
			}
		#endif

		/* Query the Accelerometer block */
		ACC_SS_0;					/* Accelerometer slave select low (selected) */
  ba:	5b 98       	cbi	0x0b, 3	; 11
  bc:	81 2f       	mov	r24, r17
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x28>
		_delay_us(25);			/* Delay for 25 us */
			/* X-axis */
			SPI_putc('X');			/* Query ACC block for X-axis */
  c2:	88 e5       	ldi	r24, 0x58	; 88
  c4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
  c8:	81 2f       	mov	r24, r17
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x34>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
  d4:	81 2f       	mov	r24, r17
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x40>
			_delay_us(25);			/* Delay for 25 us */
			X_AXIS = SPI_getc();	/* Read X-axis value from SPI */
  da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
  de:	80 93 00 01 	sts	0x0100, r24
			/* Y-axis */
			SPI_putc('Y');			/* Query ACC block for Y-axis */
  e2:	89 e5       	ldi	r24, 0x59	; 89
  e4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
  e8:	81 2f       	mov	r24, r17
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x54>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
  f4:	81 2f       	mov	r24, r17
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x60>
			_delay_us(25);			/* Delay for 25 us */
			Y_AXIS = SPI_getc();	/* Read Y-axis value from SPI */
  fa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
  fe:	80 93 01 01 	sts	0x0101, r24
			/* Z-axis */
			SPI_putc('Z');			/* Query ACC block for Z-axis */
 102:	8a e5       	ldi	r24, 0x5A	; 90
 104:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 108:	81 2f       	mov	r24, r17
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x74>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 114:	81 2f       	mov	r24, r17
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x80>
			_delay_us(25);			/* Delay for 25 us */
			Z_AXIS = SPI_getc();	/* Read Z-axis value from SPI */
 11a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 11e:	80 93 02 01 	sts	0x0102, r24
		ACC_SS_1;					/* Accelerometer slave select high (not selected) */
 122:	5b 9a       	sbi	0x0b, 3	; 11

		/* Query the Ambient Light block */
		AMB_SS_0;					/* Ambient slave select low (selected) */
 124:	5e 98       	cbi	0x0b, 6	; 11
 126:	81 2f       	mov	r24, r17
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x92>
		_delay_us(25);			/* Delay for 25 us */
			/* Light Level */
			SPI_putc('L');			/* Query AMB block for Light level */
 12c:	8c e4       	ldi	r24, 0x4C	; 76
 12e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 132:	81 2f       	mov	r24, r17
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x9e>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 13e:	81 2f       	mov	r24, r17
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xaa>
			_delay_us(25);			/* Delay for 25 us */
			LIGHT = SPI_getc();		/* Read Light value from SPI */
 144:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 148:	80 93 04 01 	sts	0x0104, r24
		AMB_SS_1;					/* Ambient slave select high (not selected) */
 14c:	5e 9a       	sbi	0x0b, 6	; 11

		/* Query the Range block */
		RNG_SS_0;					/* Range slave select low (selected) */
 14e:	5c 98       	cbi	0x0b, 4	; 11
 150:	81 2f       	mov	r24, r17
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xbc>
		_delay_us(25);			/* Delay for 25 us */
			/* Range */
			SPI_putc('R');			/* Query RNG block for range distance */
 156:	82 e5       	ldi	r24, 0x52	; 82
 158:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15c:	ce 01       	movw	r24, r28
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0xc8>
			_delay_us(150);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 168:	81 2f       	mov	r24, r17
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xd4>
			_delay_us(25);			/* Delay for 25 us */
			RANGE = SPI_getc();		/* Read Range value from SPI */
 16e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 172:	80 93 03 01 	sts	0x0103, r24
		RNG_SS_1;					/* Range slave select high (not selected) */
 176:	5c 9a       	sbi	0x0b, 4	; 11
		#ifdef SLIDING
			ARRAY_COUNT++;	/* Increment array counter */
		#endif

		/* Query the GPS block */
		GPS_SS_0;					/* GPS slave select high (selected) */
 178:	5d 98       	cbi	0x0b, 5	; 11
 17a:	80 2f       	mov	r24, r16
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xe6>
		_delay_us(50);			/* Delay for 25 us */
			/* Altitude */
			SPI_putc('A');			/* Query GPS block for altitude */
 180:	81 e4       	ldi	r24, 0x41	; 65
 182:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 186:	80 2f       	mov	r24, r16
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xf2>
			_delay_us(50);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 192:	80 2f       	mov	r24, r16
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0xfe>
			_delay_us(50);			/* Delay for 25 us */
			HALTITUDE = SPI_getc();		/* Read Altitude high byte value from SPI */
 198:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 19c:	80 93 05 01 	sts	0x0105, r24
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 1a6:	80 2f       	mov	r24, r16
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x112>
			_delay_us(50);			/* Delay for 25 us */
			LALTITUDE = SPI_getc();		/* Read Altitude low byte value from SPI */
 1ac:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 1b0:	80 93 06 01 	sts	0x0106, r24
			/* Speed */
			SPI_putc('V');			/* Query GPS block for speed */
 1b4:	86 e5       	ldi	r24, 0x56	; 86
 1b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 1ba:	80 2f       	mov	r24, r16
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x126>
			_delay_us(50);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 1c6:	80 2f       	mov	r24, r16
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x132>
			_delay_us(50);			/* Delay for 25 us */
			HSPEED = SPI_getc();		/* Read Speed high byte value from SPI */
 1cc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 1d0:	80 93 07 01 	sts	0x0107, r24
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 1da:	80 2f       	mov	r24, r16
 1dc:	8a 95       	dec	r24
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x146>
			_delay_us(50);			/* Delay for 25 us */
			LSPEED = SPI_getc();		/* Read Speed low byte value from SPI */
 1e0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 1e4:	80 93 08 01 	sts	0x0108, r24
			/* Bearing */
			SPI_putc('B');			/* Query GPS block for Bearing */
 1e8:	82 e4       	ldi	r24, 0x42	; 66
 1ea:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 1ee:	80 2f       	mov	r24, r16
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x15a>
			_delay_us(50);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 1fa:	80 2f       	mov	r24, r16
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x166>
			_delay_us(50);			/* Delay for 25 us */
			HBEARING = SPI_getc();		/* Read Bearing high byte value from SPI */
 200:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 204:	80 93 09 01 	sts	0x0109, r24
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 20e:	80 2f       	mov	r24, r16
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x17a>
			_delay_us(50);			/* Delay for 25 us */
			LBEARING = SPI_getc();		/* Read Bearing low byte value from SPI */
 214:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 218:	80 93 0a 01 	sts	0x010A, r24
			/* Time */
			/* Hour */
			SPI_putc('H');			/* Query GPS block for Minutes */
 21c:	88 e4       	ldi	r24, 0x48	; 72
 21e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 222:	80 2f       	mov	r24, r16
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x18e>
			_delay_us(50);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 22e:	80 2f       	mov	r24, r16
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x19a>
			_delay_us(50);			/* Delay for 25 us */
			HOURS = SPI_getc();		/* Read Hours value from SPI */
 234:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 238:	80 93 0b 01 	sts	0x010B, r24
			/* Minutes */
			SPI_putc('M');			/* Query GPS block for Minutes */
 23c:	8d e4       	ldi	r24, 0x4D	; 77
 23e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 242:	80 2f       	mov	r24, r16
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x1ae>
			_delay_us(50);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 24e:	80 2f       	mov	r24, r16
 250:	8a 95       	dec	r24
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x1ba>
			_delay_us(50);			/* Delay for 25 us */
			MINUTES = SPI_getc();	/* Read Minutes value from SPI */
 254:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 258:	80 93 0c 01 	sts	0x010C, r24
			/* Seconds */
			SPI_putc('S');			/* Query GPS block for Seconds */
 25c:	83 e5       	ldi	r24, 0x53	; 83
 25e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 262:	80 2f       	mov	r24, r16
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x1ce>
			_delay_us(50);			/* Delay for 25 us */
			SPI_putc(NULL);			/* Dummy send to clock SPI */
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 26e:	80 2f       	mov	r24, r16
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x1da>
			_delay_us(50);			/* Delay for 25 us */
			SECONDS = SPI_getc();	/* Read Seconds value from SPI */
 274:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_getc>
 278:	80 93 0d 01 	sts	0x010D, r24
		GPS_SS_1;	/* GPS slave select high (not selected) */
 27c:	5d 9a       	sbi	0x0b, 5	; 11
			Z_AXIS = avg(Z_ARRAY);
			LIGHT = avg(L_ARRAY);
			RANGE = avg(R_ARRAY);
		#endif

		DIS_SS_0;	/* Display slave select low (selected) */
 27e:	5f 98       	cbi	0x0b, 7	; 11
 280:	81 2f       	mov	r24, r17
 282:	8a 95       	dec	r24
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x1ec>
		_delay_us(25);			/* Delay for 25 us */
			/* X-axis */
			SPI_putc('x');			/* Prepare Display Controller for X-axis value */
 286:	88 e7       	ldi	r24, 0x78	; 120
 288:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 28c:	81 2f       	mov	r24, r17
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x1f8>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(X_AXIS);		/* Send X-axis value to Display Controller */
 292:	80 91 00 01 	lds	r24, 0x0100
 296:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 29a:	81 2f       	mov	r24, r17
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x206>
			_delay_us(25);			/* Delay for 25 us */
			/* Y-axis */
			SPI_putc('y');			/* Prepare Display Controller for Y-axis value */
 2a0:	89 e7       	ldi	r24, 0x79	; 121
 2a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2a6:	81 2f       	mov	r24, r17
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x212>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(Y_AXIS);		/* Send Y-axis value to Display Controller */
 2ac:	80 91 01 01 	lds	r24, 0x0101
 2b0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2b4:	81 2f       	mov	r24, r17
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x220>
			_delay_us(25);			/* Delay for 25 us */
			/* Z-axis */
			SPI_putc('z');			/* Prepare Display Controller for Z-axis value */
 2ba:	8a e7       	ldi	r24, 0x7A	; 122
 2bc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2c0:	81 2f       	mov	r24, r17
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x22c>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(Z_AXIS);		/* Send Z-axis value to Display Controller */
 2c6:	80 91 02 01 	lds	r24, 0x0102
 2ca:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2ce:	81 2f       	mov	r24, r17
 2d0:	8a 95       	dec	r24
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x23a>
			_delay_us(25);			/* Delay for 25 us */
			/* Ambient Light */
			SPI_putc('l');			/* Prepare Display Controller for Ambient Light value */
 2d4:	8c e6       	ldi	r24, 0x6C	; 108
 2d6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2da:	81 2f       	mov	r24, r17
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x246>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(LIGHT);		/* Send Ambient Light value to Display Controller */
 2e0:	80 91 04 01 	lds	r24, 0x0104
 2e4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2e8:	81 2f       	mov	r24, r17
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x254>
			_delay_us(25);			/* Delay for 25 us */
			/* Range */
			SPI_putc('r');			/* Prepare Display Controller for Range value */
 2ee:	82 e7       	ldi	r24, 0x72	; 114
 2f0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 2f4:	81 2f       	mov	r24, r17
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x260>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(RANGE);		/* Send Range value to Display Controller */
 2fa:	80 91 03 01 	lds	r24, 0x0103
 2fe:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 302:	81 2f       	mov	r24, r17
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x26e>
			_delay_us(25);			/* Delay for 25 us */
			/* Altitude */
			SPI_putc('a');			/* Prepare Display Controller for Altitude value */
 308:	81 e6       	ldi	r24, 0x61	; 97
 30a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 30e:	81 2f       	mov	r24, r17
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x27a>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc( HALTITUDE );	/* Send high byte of Altitude to Display Controller */
 314:	80 91 05 01 	lds	r24, 0x0105
 318:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 31c:	81 2f       	mov	r24, r17
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0x288>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc( LALTITUDE );		/* Send low byte of Altitude to Display Controller */
 322:	80 91 06 01 	lds	r24, 0x0106
 326:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 32a:	81 2f       	mov	r24, r17
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x296>
			_delay_us(25);			/* Delay for 25 us */
			/* Speed */
			SPI_putc('v');			/* Prepare Display Controller for Speed value */
 330:	86 e7       	ldi	r24, 0x76	; 118
 332:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 336:	81 2f       	mov	r24, r17
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x2a2>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc( HSPEED );		/* Send high byte of Speed to Display Controller */
 33c:	80 91 07 01 	lds	r24, 0x0107
 340:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 344:	81 2f       	mov	r24, r17
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x2b0>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc( LSPEED );			/* Send low byte of Speed to Display Controller */
 34a:	80 91 08 01 	lds	r24, 0x0108
 34e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 352:	81 2f       	mov	r24, r17
 354:	8a 95       	dec	r24
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x2be>
			_delay_us(25);			/* Delay for 25 us */
			/* Bearing */
			SPI_putc('b');			/* Prepare Display Controller for Bearing value */
 358:	82 e6       	ldi	r24, 0x62	; 98
 35a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 35e:	81 2f       	mov	r24, r17
 360:	8a 95       	dec	r24
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x2ca>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc( HBEARING );		/* Send high byte of Bearing to Display Controller */
 364:	80 91 09 01 	lds	r24, 0x0109
 368:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 36c:	81 2f       	mov	r24, r17
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x2d8>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc( LBEARING );		/* Send low byte of Bearing to Display Controller */
 372:	80 91 0a 01 	lds	r24, 0x010A
 376:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 37a:	81 2f       	mov	r24, r17
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0x2e6>
			_delay_us(25);			/* Delay for 25 us */
			/* Time */
			/* Hour */
			SPI_putc('h');			/* Prepare Display Controller for Hours value */
 380:	88 e6       	ldi	r24, 0x68	; 104
 382:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 386:	81 2f       	mov	r24, r17
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x2f2>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(HOURS);		/* Send Hours value to Display Controller */
 38c:	80 91 0b 01 	lds	r24, 0x010B
 390:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 394:	81 2f       	mov	r24, r17
 396:	8a 95       	dec	r24
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0x300>
			_delay_us(25);			/* Delay for 25 us */
			/* Minutes */
			SPI_putc('m');			/* Prepare Display Controller for Minutes value */
 39a:	8d e6       	ldi	r24, 0x6D	; 109
 39c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 3a0:	81 2f       	mov	r24, r17
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x30c>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(MINUTES);		/* Send Minutes value to Display Controller */
 3a6:	80 91 0c 01 	lds	r24, 0x010C
 3aa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 3ae:	81 2f       	mov	r24, r17
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <main+0x31a>
			_delay_us(25);			/* Delay for 25 us */
			/* Seconds */
			SPI_putc('s');			/* Prepare Display Controller for Seconds value */
 3b4:	83 e7       	ldi	r24, 0x73	; 115
 3b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 3ba:	81 2f       	mov	r24, r17
 3bc:	8a 95       	dec	r24
 3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x326>
			_delay_us(25);			/* Delay for 25 us */
			SPI_putc(SECONDS);		/* Send Seconds value to Display Controller */
 3c0:	80 91 0d 01 	lds	r24, 0x010D
 3c4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SPI_putc>
 3c8:	81 2f       	mov	r24, r17
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x334>
			_delay_us(25);			/* Delay for 25 us */
		DIS_SS_1;	/* Display slave select high (not selected) */
 3ce:	5f 9a       	sbi	0x0b, 7	; 11
 3d0:	74 ce       	rjmp	.-792    	; 0xba <main+0x24>

000003d2 <SPI_MasterInit>:

/* Initialize SPI for master mode */
void SPI_MasterInit(void)
{
	/* Configure SSn, MOSI, and SCK as output */
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SSN);
 3d2:	84 b1       	in	r24, 0x04	; 4
 3d4:	8c 62       	ori	r24, 0x2C	; 44
 3d6:	84 b9       	out	0x04, r24	; 4
	/* Configure MISO as input */
	DDR_SPI &= ~(1<<DD_MISO);
 3d8:	24 98       	cbi	0x04, 4	; 4
	/* Set MISO pull up resistor */
	PORT_SPI |= (1<<DD_MISO);
 3da:	2c 9a       	sbi	0x05, 4	; 5
	/* Set SPE and MSTR of the SPCR register */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
 3dc:	82 e5       	ldi	r24, 0x52	; 82
 3de:	8c bd       	out	0x2c, r24	; 44
	/* Clear SPI Interrupt Flag by reading SPSR and SPDR */
	char read;
	read = SPSR;
 3e0:	8d b5       	in	r24, 0x2d	; 45
	read = SPDR;
 3e2:	8e b5       	in	r24, 0x2e	; 46
}
 3e4:	08 95       	ret

000003e6 <SPI_putc>:

/* Transmit a byte of data via the SPI bus in master mode */
void SPI_putc(char cData)
{
	/* Start transmission */
	SPDR = cData;
 3e6:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 3e8:	0d b4       	in	r0, 0x2d	; 45
 3ea:	07 fe       	sbrs	r0, 7
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <SPI_putc+0x2>
}
 3ee:	08 95       	ret

000003f0 <SPI_SlaveInit>:

/* Initialize the SPI for slave mode */
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI = (1<<DD_MISO);
 3f0:	80 e1       	ldi	r24, 0x10	; 16
 3f2:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPIE)|(1<<SPE);
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	8c bd       	out	0x2c, r24	; 44
}
 3f8:	08 95       	ret

000003fa <SPI_getc>:

/* Recieve a byte of data via the SPI bus in slave mode */
char SPI_getc(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 3fa:	0d b4       	in	r0, 0x2d	; 45
 3fc:	07 fe       	sbrs	r0, 7
 3fe:	fd cf       	rjmp	.-6      	; 0x3fa <SPI_getc>
	;
	/* Return Data Register */
	return SPDR;
 400:	8e b5       	in	r24, 0x2e	; 46
}
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
